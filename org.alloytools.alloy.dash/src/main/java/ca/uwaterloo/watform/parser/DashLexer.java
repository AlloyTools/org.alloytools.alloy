/* The following code was generated by JFlex 1.4.1 on 16/02/22 7:13 PM */

// Alloy Analyzer 4 -- Copyright (c) 2006-2008, Felix Chang
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files
// (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify,
// merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
// OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

package ca.uwaterloo.watform.parser;

import edu.mit.csail.sdg.alloy4.Err;
import edu.mit.csail.sdg.alloy4.ErrorSyntax;
import edu.mit.csail.sdg.alloy4.Pos;
import edu.mit.csail.sdg.alloy4.Version;
import edu.mit.csail.sdg.ast.ExprConstant;
import edu.mit.csail.sdg.ast.ExprVar;
import java.util.List;
import java_cup.runtime.*;

/** Autogenerated by JFlex 1.4.1 */


public final class DashLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\103\1\105\1\73\1\0\1\105\1\104\16\103\4\0\1\70\1\1"+
    "\1\71\1\2\1\74\1\0\1\3\1\64\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\13\1\14\1\75\1\100\10\101\1\15\1\63\1\16"+
    "\1\17\1\12\1\0\1\20\6\77\2\74\1\56\11\74\1\61\7\74"+
    "\1\21\1\72\1\22\1\23\1\76\1\0\1\30\1\31\1\35\1\40"+
    "\1\41\1\55\1\60\1\43\1\45\1\46\1\44\1\36\1\50\1\37"+
    "\1\47\1\54\1\57\1\34\1\32\1\33\1\42\1\53\1\62\1\51"+
    "\1\52\1\74\1\24\1\25\1\26\1\27\41\103\2\0\4\102\4\0"+
    "\1\102\2\0\1\103\7\0\1\102\4\0\1\102\5\0\27\102\1\0"+
    "\12\102\1\65\24\102\1\0\u01ca\102\4\0\14\102\12\0\1\67\3\0"+
    "\5\102\7\0\1\102\1\0\1\102\21\0\160\103\5\102\1\0\2\102"+
    "\2\0\4\102\10\0\1\102\1\0\3\102\1\0\1\102\1\0\24\102"+
    "\1\0\123\102\1\0\213\102\1\0\5\103\2\0\236\102\11\0\46\102"+
    "\2\0\1\102\7\0\47\102\7\0\1\102\1\0\55\103\1\0\1\103"+
    "\1\0\2\103\1\0\2\103\1\0\1\103\10\0\33\102\5\0\3\102"+
    "\15\0\5\103\6\0\1\102\4\0\13\103\5\0\53\102\37\103\4\0"+
    "\2\102\1\103\143\102\1\0\1\102\10\103\1\0\6\103\2\102\2\103"+
    "\1\0\4\103\2\102\12\103\3\102\2\0\1\102\17\0\1\103\1\102"+
    "\1\103\36\102\33\103\2\0\131\102\13\103\1\102\16\0\12\103\41\102"+
    "\11\103\2\102\4\0\1\102\5\0\26\102\4\103\1\102\11\103\1\102"+
    "\3\103\1\102\5\103\22\0\31\102\3\103\104\0\1\102\1\0\13\102"+
    "\67\0\33\103\1\0\4\103\66\102\3\103\1\102\22\103\1\102\7\103"+
    "\12\102\2\103\2\0\12\103\1\0\7\102\1\0\7\102\1\0\3\103"+
    "\1\0\10\102\2\0\2\102\2\0\26\102\1\0\7\102\1\0\1\102"+
    "\3\0\4\102\2\0\1\103\1\102\7\103\2\0\2\103\2\0\3\103"+
    "\1\102\10\0\1\103\4\0\2\102\1\0\3\102\2\103\2\0\12\103"+
    "\4\102\7\0\1\102\5\0\3\103\1\0\6\102\4\0\2\102\2\0"+
    "\26\102\1\0\7\102\1\0\2\102\1\0\2\102\1\0\2\102\2\0"+
    "\1\103\1\0\5\103\4\0\2\103\2\0\3\103\3\0\1\103\7\0"+
    "\4\102\1\0\1\102\7\0\14\103\3\102\1\103\13\0\3\103\1\0"+
    "\11\102\1\0\3\102\1\0\26\102\1\0\7\102\1\0\2\102\1\0"+
    "\5\102\2\0\1\103\1\102\10\103\1\0\3\103\1\0\3\103\2\0"+
    "\1\102\17\0\2\102\2\103\2\0\12\103\1\0\1\102\17\0\3\103"+
    "\1\0\10\102\2\0\2\102\2\0\26\102\1\0\7\102\1\0\2\102"+
    "\1\0\5\102\2\0\1\103\1\102\7\103\2\0\2\103\2\0\3\103"+
    "\10\0\2\103\4\0\2\102\1\0\3\102\2\103\2\0\12\103\1\0"+
    "\1\102\20\0\1\103\1\102\1\0\6\102\3\0\3\102\1\0\4\102"+
    "\3\0\2\102\1\0\1\102\1\0\2\102\3\0\2\102\3\0\3\102"+
    "\3\0\14\102\4\0\5\103\3\0\3\103\1\0\4\103\2\0\1\102"+
    "\6\0\1\103\16\0\12\103\11\0\1\102\7\0\3\103\1\0\10\102"+
    "\1\0\3\102\1\0\27\102\1\0\12\102\1\0\5\102\3\0\1\102"+
    "\7\103\1\0\3\103\1\0\4\103\7\0\2\103\1\0\2\102\6\0"+
    "\2\102\2\103\2\0\12\103\22\0\2\103\1\0\10\102\1\0\3\102"+
    "\1\0\27\102\1\0\12\102\1\0\5\102\2\0\1\103\1\102\7\103"+
    "\1\0\3\103\1\0\4\103\7\0\2\103\7\0\1\102\1\0\2\102"+
    "\2\103\2\0\12\103\1\0\2\102\17\0\2\103\1\0\10\102\1\0"+
    "\3\102\1\0\51\102\2\0\1\102\7\103\1\0\3\103\1\0\4\103"+
    "\1\102\10\0\1\103\10\0\2\102\2\103\2\0\12\103\12\0\6\102"+
    "\2\0\2\103\1\0\22\102\3\0\30\102\1\0\11\102\1\0\1\102"+
    "\2\0\7\102\3\0\1\103\4\0\6\103\1\0\1\103\1\0\10\103"+
    "\22\0\2\103\15\0\60\102\1\103\2\102\7\103\4\0\10\102\10\103"+
    "\1\0\12\103\47\0\2\102\1\0\1\102\2\0\2\102\1\0\1\102"+
    "\2\0\1\102\6\0\4\102\1\0\7\102\1\0\3\102\1\0\1\102"+
    "\1\0\1\102\2\0\2\102\1\0\4\102\1\103\2\102\6\103\1\0"+
    "\2\103\1\102\2\0\5\102\1\0\1\102\1\0\6\103\2\0\12\103"+
    "\2\0\4\102\40\0\1\102\27\0\2\103\6\0\12\103\13\0\1\103"+
    "\1\0\1\103\1\0\1\103\4\0\2\103\10\102\1\0\44\102\4\0"+
    "\24\103\1\0\2\103\5\102\13\103\1\0\44\103\11\0\1\103\71\0"+
    "\53\102\24\103\1\102\12\103\6\0\6\102\4\103\4\102\3\103\1\102"+
    "\3\103\2\102\7\103\3\102\4\103\15\102\14\103\1\102\17\103\2\0"+
    "\46\102\1\0\1\102\5\0\1\102\2\0\53\102\1\0\u014d\102\1\0"+
    "\4\102\2\0\7\102\1\0\1\102\1\0\4\102\2\0\51\102\1\0"+
    "\4\102\2\0\41\102\1\0\4\102\2\0\7\102\1\0\1\102\1\0"+
    "\4\102\2\0\17\102\1\0\71\102\1\0\4\102\2\0\103\102\2\0"+
    "\3\103\40\0\20\102\20\0\125\102\14\0\u026c\102\2\0\21\102\1\0"+
    "\32\102\5\0\113\102\3\0\3\102\17\0\15\102\1\0\4\102\3\103"+
    "\13\0\22\102\3\103\13\0\22\102\2\103\14\0\15\102\1\0\3\102"+
    "\1\0\2\103\14\0\64\102\40\103\3\0\1\102\3\0\2\102\1\103"+
    "\2\0\12\103\41\0\3\103\2\0\12\103\6\0\130\102\10\0\51\102"+
    "\1\103\1\102\5\0\106\102\12\0\35\102\3\0\14\103\4\0\14\103"+
    "\12\0\12\103\36\102\2\0\5\102\13\0\54\102\4\0\21\103\7\102"+
    "\2\103\6\0\12\103\46\0\27\102\5\103\4\0\65\102\12\103\1\0"+
    "\35\103\2\0\13\103\6\0\12\103\15\0\1\102\130\0\5\103\57\102"+
    "\21\103\7\102\4\0\12\103\21\0\11\103\14\0\3\103\36\102\15\103"+
    "\2\102\12\103\54\102\16\103\14\0\44\102\24\103\10\0\12\103\3\0"+
    "\3\102\12\103\44\102\122\0\3\103\1\0\25\103\4\102\1\103\4\102"+
    "\3\103\2\102\11\0\300\102\47\103\25\0\4\103\u0116\102\2\0\6\102"+
    "\2\0\46\102\2\0\6\102\2\0\10\102\1\0\1\102\1\0\1\102"+
    "\1\0\1\102\1\0\37\102\2\0\65\102\1\0\7\102\1\0\1\102"+
    "\3\0\3\102\1\0\7\102\3\0\4\102\2\0\6\102\4\0\15\102"+
    "\5\0\3\102\1\0\7\102\16\0\5\103\32\0\5\103\20\0\2\102"+
    "\23\0\1\102\13\0\5\103\5\0\6\103\1\0\1\102\15\0\1\102"+
    "\20\0\15\102\3\0\14\102\1\66\16\102\25\0\15\103\4\0\1\103"+
    "\3\0\14\103\21\0\1\102\4\0\1\102\2\0\12\102\1\0\1\102"+
    "\3\0\5\102\4\0\1\67\1\0\1\102\1\0\1\102\1\0\1\102"+
    "\1\0\4\102\1\0\13\102\2\0\4\102\5\0\5\102\4\0\1\102"+
    "\21\0\51\102\u0a77\0\57\102\1\0\57\102\1\0\205\102\6\0\4\102"+
    "\3\103\2\102\14\0\46\102\1\0\1\102\5\0\1\102\2\0\70\102"+
    "\7\0\1\102\17\0\1\103\27\102\11\0\7\102\1\0\7\102\1\0"+
    "\7\102\1\0\7\102\1\0\7\102\1\0\7\102\1\0\7\102\1\0"+
    "\7\102\1\0\40\103\57\0\1\102\u01d5\0\3\102\31\0\11\102\6\103"+
    "\1\0\5\102\2\0\5\102\4\0\126\102\2\0\2\103\2\0\3\102"+
    "\1\0\132\102\1\0\4\102\5\0\51\102\3\0\136\102\21\0\33\102"+
    "\65\0\20\102\u0200\0\u19b6\102\112\0\u51cd\102\63\0\u048d\102\103\0\56\102"+
    "\2\0\u010d\102\3\0\20\102\12\103\2\102\24\0\57\102\1\103\4\0"+
    "\12\103\1\0\31\102\7\0\1\103\120\102\2\103\45\0\11\102\2\0"+
    "\147\102\2\0\4\102\1\0\4\102\14\0\13\102\115\0\12\102\1\103"+
    "\3\102\1\103\4\102\1\103\27\102\5\103\20\0\1\102\7\0\64\102"+
    "\14\0\2\103\62\102\21\103\13\0\12\103\6\0\22\103\6\102\3\0"+
    "\1\102\4\0\12\103\34\102\10\103\2\0\27\102\15\103\14\0\35\102"+
    "\3\0\4\103\57\102\16\103\16\0\1\102\12\103\46\0\51\102\16\103"+
    "\11\0\3\102\1\103\10\102\2\103\2\0\12\103\6\0\27\102\3\0"+
    "\1\102\1\103\4\0\60\102\1\103\1\102\3\103\2\102\2\103\5\102"+
    "\2\103\1\102\1\103\1\102\30\0\3\102\2\0\13\102\5\103\2\0"+
    "\3\102\2\103\12\0\6\102\2\0\6\102\2\0\6\102\11\0\7\102"+
    "\1\0\7\102\221\0\43\102\10\103\1\0\2\103\2\0\12\103\6\0"+
    "\u2ba4\102\14\0\27\102\4\0\61\102\u2104\0\u016e\102\2\0\152\102\46\0"+
    "\7\102\14\0\5\102\5\0\1\102\1\103\12\102\1\0\15\102\1\0"+
    "\5\102\1\0\1\102\1\0\2\102\1\0\2\102\1\0\154\102\41\0"+
    "\u016b\102\22\0\100\102\2\0\66\102\50\0\15\102\3\0\20\103\20\0"+
    "\7\103\14\0\2\102\30\0\3\102\31\0\1\102\6\0\5\102\1\0"+
    "\207\102\2\0\1\103\4\0\1\102\13\0\12\103\7\0\32\102\4\0"+
    "\1\102\1\0\32\102\13\0\131\102\3\0\6\102\2\0\6\102\2\0"+
    "\6\102\2\0\3\102\3\0\2\102\3\0\2\102\22\0\3\103\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\27\31\1\32\1\33\1\31\1\34\1\35\2\36"+
    "\1\37\1\40\1\34\1\41\1\42\1\43\1\0\1\44"+
    "\1\45\1\46\1\47\1\50\1\47\1\51\1\31\1\52"+
    "\23\31\1\53\2\31\1\54\6\31\1\55\3\31\1\51"+
    "\1\56\16\31\1\57\1\0\3\60\1\61\2\0\1\62"+
    "\3\31\1\63\1\31\1\37\2\31\1\64\2\31\1\65"+
    "\1\31\1\66\1\67\1\31\1\70\5\31\1\71\2\31"+
    "\1\72\1\31\1\2\6\31\1\73\2\31\1\74\6\31"+
    "\1\75\4\31\1\62\1\31\1\76\2\31\1\77\5\31"+
    "\1\100\1\101\1\102\3\31\1\103\1\104\1\60\1\105"+
    "\1\0\1\34\10\31\1\106\1\31\1\107\2\31\1\110"+
    "\4\31\1\111\1\112\1\31\1\0\1\113\1\114\1\31"+
    "\1\115\3\31\1\116\3\31\1\117\1\31\1\120\1\31"+
    "\1\121\1\31\1\122\1\123\1\31\1\124\1\125\1\31"+
    "\1\126\1\127\1\130\1\31\1\131\4\31\1\132\1\31"+
    "\1\133\1\134\1\135\1\136\2\31\1\137\1\0\2\31"+
    "\1\0\1\31\1\140\4\31\1\141\1\142\10\31\1\143"+
    "\1\144\1\145\1\146\2\31\1\0\2\31\1\0\4\31"+
    "\1\147\4\31\1\150\2\31\1\151\3\31\1\0\1\31"+
    "\1\152\1\0\1\31\1\153\1\154\4\31\1\50\1\31"+
    "\1\155\1\156\1\31\1\157\1\0\1\31\1\0\1\113"+
    "\5\31\1\160\1\0\1\161\1\162\3\31\1\163\1\124"+
    "\1\164\1\74\1\165\2\31\1\166";

  private static int [] zzUnpackAction() {
    int [] result = new int[351];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\106\0\106\0\214\0\106\0\106\0\106"+
    "\0\322\0\106\0\u0118\0\u015e\0\106\0\u01a4\0\u01ea\0\u0230"+
    "\0\u0276\0\106\0\106\0\106\0\106\0\106\0\u02bc\0\106"+
    "\0\106\0\u0302\0\u0348\0\u038e\0\u03d4\0\u041a\0\u0460\0\u04a6"+
    "\0\u04ec\0\u0532\0\u0578\0\u05be\0\u0604\0\u064a\0\u0690\0\u06d6"+
    "\0\u071c\0\u0762\0\u07a8\0\u07ee\0\u0834\0\u087a\0\u08c0\0\u0906"+
    "\0\106\0\106\0\u094c\0\106\0\u0992\0\u09d8\0\u0a1e\0\106"+
    "\0\106\0\u0a64\0\106\0\u0aaa\0\106\0\u0af0\0\106\0\106"+
    "\0\106\0\u0b36\0\106\0\106\0\106\0\u0b7c\0\u0bc2\0\u0c08"+
    "\0\u0c4e\0\u0c94\0\u0cda\0\u0d20\0\u0d66\0\u0dac\0\u0df2\0\u0e38"+
    "\0\u0e7e\0\u0ec4\0\u0f0a\0\u0f50\0\u0f96\0\u0fdc\0\u1022\0\u1068"+
    "\0\u10ae\0\u10f4\0\u113a\0\u1180\0\u11c6\0\u064a\0\u120c\0\u1252"+
    "\0\u1298\0\u12de\0\u1324\0\u136a\0\u13b0\0\u13f6\0\u143c\0\u1482"+
    "\0\u064a\0\u14c8\0\u150e\0\u1554\0\u159a\0\u15e0\0\u1626\0\u166c"+
    "\0\u16b2\0\u16f8\0\u173e\0\u1784\0\u17ca\0\u1810\0\u1856\0\u189c"+
    "\0\u18e2\0\u1928\0\u196e\0\u19b4\0\u19fa\0\106\0\u1a40\0\u1a86"+
    "\0\106\0\u1acc\0\u1b12\0\u1b58\0\u064a\0\u1b9e\0\u064a\0\u1be4"+
    "\0\u1c2a\0\u064a\0\u1c70\0\u1cb6\0\u064a\0\u1cfc\0\u064a\0\u064a"+
    "\0\u1d42\0\u064a\0\u1d88\0\u1dce\0\u1e14\0\u1e5a\0\u1ea0\0\u064a"+
    "\0\u1ee6\0\u1f2c\0\u064a\0\u1f72\0\u064a\0\u1fb8\0\u1ffe\0\u2044"+
    "\0\u208a\0\u20d0\0\u2116\0\u064a\0\u215c\0\u21a2\0\u21e8\0\u222e"+
    "\0\u2274\0\u22ba\0\u2300\0\u2346\0\u238c\0\u064a\0\u23d2\0\u2418"+
    "\0\u245e\0\u24a4\0\u064a\0\u24ea\0\u064a\0\u2530\0\u2576\0\u064a"+
    "\0\u25bc\0\u2602\0\u2648\0\u268e\0\u26d4\0\u064a\0\u064a\0\u064a"+
    "\0\u271a\0\u2760\0\u27a6\0\u18e2\0\u19b4\0\u27ec\0\u19fa\0\u2832"+
    "\0\u1a40\0\u2878\0\u28be\0\u2904\0\u294a\0\u2990\0\u29d6\0\u2a1c"+
    "\0\u2a62\0\u064a\0\u2aa8\0\u064a\0\u2aee\0\u2b34\0\u064a\0\u2b7a"+
    "\0\u2bc0\0\u2c06\0\u2c4c\0\u064a\0\u064a\0\u2c92\0\u2cd8\0\u2d1e"+
    "\0\u064a\0\u2d64\0\u064a\0\u2daa\0\u2df0\0\u2e36\0\u064a\0\u2e7c"+
    "\0\u2ec2\0\u2f08\0\u064a\0\u2f4e\0\u064a\0\u2f94\0\u064a\0\u2fda"+
    "\0\u064a\0\u064a\0\u3020\0\u3066\0\u064a\0\u30ac\0\u064a\0\u064a"+
    "\0\u064a\0\u30f2\0\u064a\0\u3138\0\u317e\0\u31c4\0\u320a\0\u064a"+
    "\0\u3250\0\u064a\0\u064a\0\u064a\0\u064a\0\u3296\0\u32dc\0\u064a"+
    "\0\u3322\0\u3368\0\u33ae\0\u33f4\0\u343a\0\u064a\0\u3480\0\u34c6"+
    "\0\u350c\0\u3552\0\u3598\0\u064a\0\u35de\0\u3624\0\u366a\0\u36b0"+
    "\0\u36f6\0\u373c\0\u3782\0\u37c8\0\u064a\0\u064a\0\u064a\0\u064a"+
    "\0\u380e\0\u3854\0\u389a\0\u38e0\0\u3926\0\u396c\0\u39b2\0\u39f8"+
    "\0\u3a3e\0\u3a84\0\u064a\0\u3aca\0\u3b10\0\u3b56\0\u3b9c\0\u064a"+
    "\0\u3be2\0\u3c28\0\u064a\0\u3c6e\0\u3cb4\0\u3cfa\0\u3d40\0\u3d86"+
    "\0\u064a\0\u3dcc\0\u3e12\0\u064a\0\u064a\0\u3e58\0\u3e9e\0\u3ee4"+
    "\0\u3f2a\0\u064a\0\u3f70\0\u064a\0\u064a\0\u3fb6\0\u064a\0\u3ffc"+
    "\0\u4042\0\u4088\0\u064a\0\u40ce\0\u4114\0\u415a\0\u41a0\0\u41e6"+
    "\0\u064a\0\u422c\0\u064a\0\106\0\u4272\0\u42b8\0\u42fe\0\u064a"+
    "\0\u064a\0\106\0\u064a\0\u064a\0\u4344\0\u438a\0\u064a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[351];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\46\1\50"+
    "\1\51\2\46\1\52\1\53\1\54\1\55\1\46\1\56"+
    "\1\57\1\60\1\61\1\62\1\63\1\46\1\2\1\64"+
    "\1\65\1\2\1\64\1\46\1\66\2\46\2\67\1\46"+
    "\1\2\2\64\111\0\1\70\111\0\1\71\107\0\1\72"+
    "\1\73\105\0\1\74\4\0\1\75\74\0\1\76\5\0"+
    "\1\72\103\0\1\77\2\0\1\15\105\0\1\100\1\101"+
    "\1\102\100\0\1\103\3\0\1\104\114\0\1\105\110\0"+
    "\1\46\1\106\1\107\2\46\1\110\1\111\1\112\15\46"+
    "\1\113\5\46\1\0\3\46\2\0\1\46\2\0\10\46"+
    "\32\0\11\46\1\114\1\115\20\46\1\0\3\46\2\0"+
    "\1\46\2\0\10\46\32\0\3\46\1\116\5\46\1\117"+
    "\1\120\2\46\1\121\1\46\1\122\13\46\1\0\3\46"+
    "\2\0\1\46\2\0\10\46\32\0\4\46\1\123\6\46"+
    "\1\124\17\46\1\0\3\46\2\0\1\46\2\0\10\46"+
    "\32\0\11\46\1\125\1\126\20\46\1\0\3\46\2\0"+
    "\1\46\2\0\10\46\32\0\13\46\1\127\3\46\1\130"+
    "\13\46\1\0\3\46\2\0\1\46\2\0\10\46\32\0"+
    "\11\46\1\131\5\46\1\132\13\46\1\0\3\46\2\0"+
    "\1\46\2\0\10\46\32\0\17\46\1\133\13\46\1\0"+
    "\3\46\2\0\1\46\2\0\10\46\32\0\11\46\1\134"+
    "\3\46\1\135\1\46\1\136\13\46\1\0\3\46\2\0"+
    "\1\46\2\0\10\46\32\0\6\46\1\137\1\140\11\46"+
    "\1\141\1\46\1\142\7\46\1\0\3\46\2\0\1\46"+
    "\2\0\10\46\32\0\7\46\1\143\23\46\1\0\3\46"+
    "\2\0\1\46\2\0\10\46\32\0\15\46\1\144\15\46"+
    "\1\0\3\46\2\0\1\46\2\0\10\46\32\0\33\46"+
    "\1\0\3\46\2\0\1\46\2\0\10\46\32\0\7\46"+
    "\1\145\1\146\7\46\1\147\4\46\1\150\5\46\1\0"+
    "\3\46\2\0\1\46\2\0\10\46\32\0\4\46\1\151"+
    "\2\46\1\152\14\46\1\153\6\46\1\0\3\46\2\0"+
    "\1\46\2\0\10\46\32\0\17\46\1\154\13\46\1\0"+
    "\3\46\2\0\1\46\2\0\10\46\32\0\1\155\32\46"+
    "\1\0\3\46\2\0\1\46\2\0\10\46\32\0\1\156"+
    "\3\46\1\157\26\46\1\0\3\46\2\0\1\46\2\0"+
    "\10\46\32\0\1\160\3\46\1\161\5\46\1\162\4\46"+
    "\1\163\13\46\1\0\3\46\2\0\1\46\2\0\10\46"+
    "\32\0\7\46\1\164\23\46\1\0\3\46\2\0\1\46"+
    "\2\0\10\46\32\0\17\46\1\165\13\46\1\0\3\46"+
    "\2\0\1\46\2\0\10\46\32\0\3\46\1\166\27\46"+
    "\1\0\3\46\2\0\1\46\2\0\10\46\32\0\13\46"+
    "\1\167\17\46\1\0\3\46\2\0\1\46\2\0\10\46"+
    "\32\0\33\46\1\0\2\46\1\170\2\0\1\46\2\0"+
    "\10\46\2\0\71\65\1\171\1\172\13\65\30\0\1\173"+
    "\1\174\17\173\1\175\11\173\1\0\1\173\4\0\1\173"+
    "\2\0\1\173\1\67\2\173\2\67\34\0\33\173\1\0"+
    "\1\173\4\0\1\173\2\0\1\173\1\67\2\173\2\67"+
    "\4\0\73\72\1\64\10\72\1\64\1\72\12\0\1\176"+
    "\73\0\6\177\1\200\77\177\12\0\1\201\123\0\2\46"+
    "\1\202\30\46\1\0\3\46\2\0\1\46\2\0\10\46"+
    "\32\0\2\46\1\203\30\46\1\0\3\46\2\0\1\46"+
    "\2\0\10\46\32\0\3\46\1\204\27\46\1\0\3\46"+
    "\2\0\1\46\2\0\10\46\32\0\6\46\1\205\23\46"+
    "\1\206\1\0\3\46\2\0\1\46\2\0\10\46\32\0"+
    "\10\46\1\207\22\46\1\0\3\46\2\0\1\46\2\0"+
    "\10\46\32\0\3\46\1\210\27\46\1\0\3\46\2\0"+
    "\1\46\2\0\10\46\32\0\25\46\1\211\5\46\1\0"+
    "\3\46\2\0\1\46\2\0\10\46\32\0\3\46\1\212"+
    "\27\46\1\0\3\46\2\0\1\46\2\0\10\46\32\0"+
    "\1\213\10\46\1\214\21\46\1\0\3\46\2\0\1\46"+
    "\2\0\10\46\32\0\3\46\1\215\3\46\1\216\17\46"+
    "\1\217\3\46\1\0\3\46\2\0\1\46\2\0\10\46"+
    "\32\0\20\46\1\220\12\46\1\0\3\46\2\0\1\46"+
    "\2\0\10\46\32\0\7\46\1\221\20\46\1\222\2\46"+
    "\1\0\3\46\2\0\1\46\2\0\10\46\32\0\20\46"+
    "\1\223\12\46\1\0\3\46\2\0\1\46\2\0\10\46"+
    "\32\0\1\224\14\46\1\225\15\46\1\0\3\46\2\0"+
    "\1\46\2\0\10\46\32\0\15\46\1\226\15\46\1\0"+
    "\3\46\2\0\1\46\2\0\10\46\32\0\6\46\1\227"+
    "\24\46\1\0\3\46\2\0\1\46\2\0\10\46\32\0"+
    "\7\46\1\230\23\46\1\0\3\46\2\0\1\46\2\0"+
    "\10\46\32\0\11\46\1\231\21\46\1\0\3\46\2\0"+
    "\1\46\2\0\10\46\32\0\7\46\1\232\23\46\1\0"+
    "\3\46\2\0\1\46\2\0\10\46\32\0\3\46\1\233"+
    "\27\46\1\0\3\46\2\0\1\46\2\0\10\46\32\0"+
    "\7\46\1\234\23\46\1\0\3\46\2\0\1\46\2\0"+
    "\10\46\32\0\3\46\1\235\3\46\1\236\23\46\1\0"+
    "\3\46\2\0\1\46\2\0\10\46\32\0\25\46\1\237"+
    "\5\46\1\0\3\46\2\0\1\46\2\0\10\46\32\0"+
    "\2\46\1\240\30\46\1\0\3\46\2\0\1\46\2\0"+
    "\10\46\32\0\2\46\1\241\30\46\1\0\3\46\2\0"+
    "\1\46\2\0\10\46\32\0\3\46\1\242\6\46\1\243"+
    "\10\46\1\244\7\46\1\0\3\46\2\0\1\46\2\0"+
    "\10\46\32\0\1\245\2\46\1\246\7\46\1\247\1\46"+
    "\1\250\6\46\1\251\6\46\1\0\3\46\2\0\1\46"+
    "\2\0\10\46\32\0\11\46\1\252\21\46\1\0\3\46"+
    "\2\0\1\46\2\0\10\46\32\0\3\46\1\253\11\46"+
    "\1\254\15\46\1\0\3\46\2\0\1\46\2\0\10\46"+
    "\32\0\2\46\1\255\30\46\1\0\3\46\2\0\1\46"+
    "\2\0\10\46\32\0\3\46\1\256\11\46\1\257\5\46"+
    "\1\260\7\46\1\0\3\46\2\0\1\46\2\0\10\46"+
    "\32\0\11\46\1\261\21\46\1\0\3\46\2\0\1\46"+
    "\2\0\10\46\32\0\24\46\1\262\6\46\1\0\3\46"+
    "\2\0\1\46\2\0\10\46\32\0\25\46\1\263\5\46"+
    "\1\0\3\46\2\0\1\46\2\0\10\46\32\0\5\46"+
    "\1\264\3\46\1\265\21\46\1\0\3\46\2\0\1\46"+
    "\2\0\10\46\32\0\11\46\1\266\21\46\1\0\3\46"+
    "\2\0\1\46\2\0\10\46\32\0\10\46\1\267\22\46"+
    "\1\0\3\46\2\0\1\46\2\0\10\46\32\0\4\46"+
    "\1\270\26\46\1\0\3\46\2\0\1\46\2\0\10\46"+
    "\32\0\4\46\1\271\26\46\1\0\3\46\2\0\1\46"+
    "\2\0\10\46\32\0\11\46\1\272\3\46\1\273\15\46"+
    "\1\0\3\46\2\0\1\46\2\0\10\46\32\0\5\46"+
    "\1\274\25\46\1\0\3\46\2\0\1\46\2\0\10\46"+
    "\32\0\17\46\1\275\13\46\1\0\3\46\2\0\1\46"+
    "\2\0\10\46\32\0\7\46\1\276\23\46\1\0\3\46"+
    "\2\0\1\46\2\0\10\46\32\0\4\46\1\277\26\46"+
    "\1\0\3\46\2\0\1\46\2\0\10\46\32\0\3\46"+
    "\1\300\27\46\1\0\3\46\2\0\1\46\2\0\10\46"+
    "\32\0\3\46\1\301\27\46\1\0\3\46\2\0\1\46"+
    "\2\0\10\46\32\0\4\46\1\302\26\46\1\0\3\46"+
    "\2\0\1\46\2\0\10\46\32\0\11\46\1\303\21\46"+
    "\1\0\3\46\2\0\1\46\2\0\10\46\32\0\33\46"+
    "\1\0\3\46\1\62\1\0\1\46\2\0\10\46\32\0"+
    "\33\304\1\0\1\304\4\0\1\304\2\0\6\304\4\0"+
    "\73\65\1\0\12\65\30\0\33\173\1\0\1\173\4\0"+
    "\1\173\2\0\6\173\34\0\33\173\1\0\1\173\4\0"+
    "\1\173\2\0\1\173\2\305\1\173\1\305\1\173\34\0"+
    "\2\306\3\173\1\306\2\173\2\306\13\173\1\306\5\173"+
    "\1\0\1\173\4\0\1\173\2\0\1\173\1\306\1\307"+
    "\3\306\4\0\6\177\1\310\105\177\1\310\5\177\1\311"+
    "\71\177\30\0\3\46\1\312\27\46\1\0\3\46\2\0"+
    "\1\46\2\0\10\46\32\0\11\46\1\313\21\46\1\0"+
    "\3\46\2\0\1\46\2\0\10\46\32\0\15\46\1\314"+
    "\15\46\1\0\3\46\2\0\1\46\2\0\10\46\32\0"+
    "\1\315\32\46\1\0\3\46\2\0\1\46\2\0\10\46"+
    "\32\0\11\46\1\316\21\46\1\0\3\46\2\0\1\46"+
    "\2\0\10\46\32\0\17\46\1\317\13\46\1\0\3\46"+
    "\2\0\1\46\2\0\10\46\32\0\3\46\1\320\27\46"+
    "\1\0\3\46\2\0\1\46\2\0\10\46\32\0\24\46"+
    "\1\321\6\46\1\0\3\46\2\0\1\46\2\0\10\46"+
    "\32\0\10\46\1\322\22\46\1\0\3\46\2\0\1\46"+
    "\2\0\10\46\32\0\5\46\1\323\25\46\1\0\3\46"+
    "\2\0\1\46\2\0\10\46\32\0\11\46\1\324\21\46"+
    "\1\0\3\46\2\0\1\46\2\0\10\46\32\0\7\46"+
    "\1\325\23\46\1\0\3\46\2\0\1\46\2\0\10\46"+
    "\32\0\30\46\1\326\2\46\1\0\3\46\2\0\1\46"+
    "\2\0\10\46\32\0\2\46\1\327\30\46\1\0\3\46"+
    "\2\0\1\46\2\0\10\46\32\0\11\46\1\330\21\46"+
    "\1\0\3\46\2\0\1\46\2\0\10\46\32\0\5\46"+
    "\1\331\25\46\1\0\3\46\2\0\1\46\2\0\10\46"+
    "\32\0\5\46\1\332\2\46\1\333\22\46\1\0\3\46"+
    "\2\0\1\46\2\0\10\46\32\0\11\46\1\334\21\46"+
    "\1\0\3\46\2\0\1\46\2\0\10\46\32\0\11\46"+
    "\1\335\21\46\1\0\3\46\2\0\1\46\2\0\10\46"+
    "\32\0\1\336\32\46\1\0\3\46\1\0\1\337\1\46"+
    "\2\0\10\46\32\0\16\46\1\340\14\46\1\0\3\46"+
    "\2\0\1\46\2\0\10\46\32\0\11\46\1\341\21\46"+
    "\1\0\3\46\2\0\1\46\2\0\10\46\32\0\11\46"+
    "\1\342\21\46\1\0\3\46\2\0\1\46\2\0\10\46"+
    "\32\0\20\46\1\343\12\46\1\0\3\46\2\0\1\46"+
    "\2\0\10\46\32\0\5\46\1\344\25\46\1\0\3\46"+
    "\2\0\1\46\2\0\10\46\32\0\11\46\1\345\21\46"+
    "\1\0\3\46\2\0\1\46\2\0\10\46\32\0\1\346"+
    "\32\46\1\0\3\46\2\0\1\46\2\0\10\46\32\0"+
    "\3\46\1\347\27\46\1\0\3\46\2\0\1\46\2\0"+
    "\10\46\32\0\11\46\1\350\21\46\1\0\3\46\2\0"+
    "\1\46\2\0\10\46\32\0\7\46\1\351\23\46\1\0"+
    "\3\46\2\0\1\46\2\0\10\46\32\0\15\46\1\352"+
    "\15\46\1\0\3\46\2\0\1\46\2\0\10\46\32\0"+
    "\23\46\1\353\7\46\1\0\3\46\2\0\1\46\2\0"+
    "\10\46\32\0\3\46\1\354\27\46\1\0\3\46\2\0"+
    "\1\46\2\0\10\46\32\0\3\46\1\355\27\46\1\0"+
    "\3\46\2\0\1\46\2\0\10\46\32\0\1\356\32\46"+
    "\1\0\3\46\2\0\1\46\2\0\10\46\32\0\7\46"+
    "\1\357\23\46\1\0\3\46\2\0\1\46\2\0\10\46"+
    "\32\0\6\46\1\360\24\46\1\0\3\46\2\0\1\46"+
    "\2\0\10\46\32\0\11\46\1\361\21\46\1\0\3\46"+
    "\2\0\1\46\2\0\10\46\32\0\7\46\1\362\23\46"+
    "\1\0\3\46\2\0\1\46\2\0\10\46\32\0\12\46"+
    "\1\363\20\46\1\0\3\46\2\0\1\46\2\0\10\46"+
    "\32\0\3\46\1\364\27\46\1\0\3\46\2\0\1\46"+
    "\2\0\10\46\32\0\10\46\1\365\22\46\1\0\3\46"+
    "\2\0\1\46\2\0\10\46\32\0\23\46\1\366\7\46"+
    "\1\0\3\46\2\0\1\46\2\0\10\46\32\0\3\46"+
    "\1\367\27\46\1\0\3\46\2\0\1\46\2\0\10\46"+
    "\32\0\20\46\1\370\12\46\1\0\3\46\2\0\1\46"+
    "\2\0\10\46\32\0\17\46\1\371\13\46\1\0\3\46"+
    "\2\0\1\46\2\0\10\46\32\0\15\46\1\372\15\46"+
    "\1\0\3\46\2\0\1\46\2\0\10\46\32\0\7\46"+
    "\1\373\23\46\1\0\3\46\2\0\1\46\2\0\10\46"+
    "\32\0\2\307\3\173\1\307\2\173\2\307\13\173\1\307"+
    "\5\173\1\0\1\173\4\0\1\173\2\0\1\173\1\307"+
    "\1\173\3\307\4\0\6\177\1\310\5\177\1\64\71\177"+
    "\30\0\4\46\1\374\26\46\1\0\3\46\2\0\1\46"+
    "\2\0\10\46\32\0\4\46\1\375\26\46\1\0\3\46"+
    "\2\0\1\46\2\0\10\46\32\0\17\46\1\376\13\46"+
    "\1\0\3\46\2\0\1\46\2\0\10\46\32\0\22\46"+
    "\1\377\10\46\1\0\3\46\2\0\1\46\2\0\10\46"+
    "\32\0\4\46\1\u0100\26\46\1\0\3\46\2\0\1\46"+
    "\2\0\10\46\32\0\4\46\1\u0101\26\46\1\0\3\46"+
    "\2\0\1\46\2\0\10\46\32\0\11\46\1\u0102\21\46"+
    "\1\0\3\46\2\0\1\46\2\0\10\46\32\0\2\46"+
    "\1\u0103\30\46\1\0\3\46\2\0\1\46\2\0\10\46"+
    "\32\0\11\46\1\u0104\21\46\1\0\3\46\2\0\1\46"+
    "\2\0\10\46\32\0\2\46\1\u0105\30\46\1\0\3\46"+
    "\2\0\1\46\2\0\10\46\32\0\30\46\1\u0106\2\46"+
    "\1\0\3\46\2\0\1\46\2\0\10\46\32\0\1\u0107"+
    "\32\46\1\0\3\46\2\0\1\46\2\0\10\46\32\0"+
    "\14\46\1\u0108\16\46\1\0\3\46\2\0\1\46\2\0"+
    "\10\46\32\0\33\46\1\0\3\46\1\0\1\u0109\1\46"+
    "\2\0\10\46\32\0\15\46\1\u010a\15\46\1\0\3\46"+
    "\2\0\1\46\2\0\10\46\32\0\12\46\1\u010b\20\46"+
    "\1\0\3\46\2\0\1\46\2\0\10\46\35\0\1\u010c"+
    "\102\0\17\46\1\u010d\13\46\1\0\3\46\2\0\1\46"+
    "\2\0\10\46\32\0\4\46\1\u010e\26\46\1\0\3\46"+
    "\2\0\1\46\2\0\10\46\32\0\3\46\1\u010f\27\46"+
    "\1\0\3\46\2\0\1\46\2\0\10\46\32\0\7\46"+
    "\1\u0110\23\46\1\0\3\46\2\0\1\46\2\0\10\46"+
    "\32\0\12\46\1\u0111\20\46\1\0\3\46\2\0\1\46"+
    "\2\0\10\46\32\0\5\46\1\u0112\25\46\1\0\3\46"+
    "\2\0\1\46\2\0\10\46\32\0\3\46\1\u0113\27\46"+
    "\1\0\3\46\2\0\1\46\2\0\10\46\32\0\6\46"+
    "\1\u0114\24\46\1\0\3\46\2\0\1\46\2\0\10\46"+
    "\32\0\17\46\1\u0115\13\46\1\0\3\46\2\0\1\46"+
    "\2\0\10\46\32\0\4\46\1\u0116\26\46\1\0\3\46"+
    "\2\0\1\46\2\0\10\46\32\0\15\46\1\u0117\15\46"+
    "\1\0\3\46\2\0\1\46\2\0\10\46\32\0\6\46"+
    "\1\u0118\24\46\1\0\3\46\2\0\1\46\2\0\10\46"+
    "\32\0\15\46\1\u0119\15\46\1\0\3\46\2\0\1\46"+
    "\2\0\10\46\32\0\1\u011a\32\46\1\0\3\46\2\0"+
    "\1\46\2\0\10\46\32\0\7\46\1\u011b\23\46\1\0"+
    "\3\46\2\0\1\46\2\0\10\46\32\0\1\u011c\32\46"+
    "\1\0\3\46\2\0\1\46\2\0\10\46\32\0\3\46"+
    "\1\u011d\27\46\1\0\3\46\2\0\1\46\2\0\10\46"+
    "\32\0\7\46\1\u011e\23\46\1\0\3\46\2\0\1\46"+
    "\2\0\10\46\32\0\2\46\1\u011f\30\46\1\0\3\46"+
    "\2\0\1\46\2\0\10\46\32\0\11\46\1\u0120\21\46"+
    "\1\0\3\46\2\0\1\46\2\0\10\46\32\0\11\46"+
    "\1\u0121\21\46\1\0\3\46\2\0\1\46\2\0\10\46"+
    "\32\0\2\46\1\u0122\30\46\1\0\3\46\2\0\1\46"+
    "\2\0\10\46\34\0\1\u0123\103\0\3\46\1\u0124\27\46"+
    "\1\0\3\46\2\0\1\46\2\0\10\46\32\0\6\46"+
    "\1\u0125\24\46\1\0\3\46\2\0\1\46\2\0\10\46"+
    "\36\0\1\u0126\101\0\15\46\1\u0127\15\46\1\0\3\46"+
    "\2\0\1\46\2\0\10\46\32\0\6\46\1\u0128\24\46"+
    "\1\0\3\46\2\0\1\46\2\0\10\46\32\0\10\46"+
    "\1\u0129\22\46\1\0\3\46\2\0\1\46\2\0\10\46"+
    "\32\0\2\46\1\u012a\30\46\1\0\3\46\2\0\1\46"+
    "\2\0\10\46\32\0\3\46\1\u012b\27\46\1\0\3\46"+
    "\2\0\1\46\2\0\10\46\32\0\12\46\1\u012c\20\46"+
    "\1\0\3\46\2\0\1\46\2\0\10\46\32\0\4\46"+
    "\1\u012d\26\46\1\0\3\46\2\0\1\46\2\0\10\46"+
    "\32\0\15\46\1\u012e\15\46\1\0\3\46\2\0\1\46"+
    "\2\0\10\46\32\0\11\46\1\u012f\21\46\1\0\3\46"+
    "\2\0\1\46\2\0\10\46\32\0\11\46\1\u0130\21\46"+
    "\1\0\3\46\2\0\1\46\2\0\10\46\32\0\3\46"+
    "\1\u0131\27\46\1\0\3\46\2\0\1\46\2\0\10\46"+
    "\32\0\3\46\1\u0132\27\46\1\0\3\46\2\0\1\46"+
    "\2\0\10\46\32\0\30\46\1\u0133\2\46\1\0\3\46"+
    "\2\0\1\46\2\0\10\46\32\0\5\46\1\u0134\25\46"+
    "\1\0\3\46\2\0\1\46\2\0\10\46\32\0\4\46"+
    "\1\u0135\26\46\1\0\3\46\2\0\1\46\2\0\10\46"+
    "\32\0\11\46\1\u0136\21\46\1\0\3\46\2\0\1\46"+
    "\2\0\10\46\35\0\1\u0137\102\0\15\46\1\u0138\15\46"+
    "\1\0\3\46\2\0\1\46\2\0\10\46\32\0\3\46"+
    "\1\u0139\27\46\1\0\3\46\2\0\1\46\2\0\10\46"+
    "\32\0\1\u013a\105\0\7\46\1\u013b\23\46\1\0\3\46"+
    "\2\0\1\46\2\0\10\46\32\0\22\46\1\u013c\10\46"+
    "\1\0\3\46\2\0\1\46\2\0\10\46\32\0\2\46"+
    "\1\u013d\30\46\1\0\3\46\2\0\1\46\2\0\10\46"+
    "\32\0\3\46\1\u013e\27\46\1\0\3\46\2\0\1\46"+
    "\2\0\10\46\32\0\1\u013f\32\46\1\0\3\46\2\0"+
    "\1\46\2\0\10\46\32\0\15\46\1\u0140\15\46\1\0"+
    "\3\46\2\0\1\46\2\0\10\46\32\0\1\u0141\32\46"+
    "\1\0\3\46\2\0\1\46\2\0\10\46\32\0\2\46"+
    "\1\u0142\30\46\1\0\3\46\2\0\1\46\2\0\10\46"+
    "\32\0\15\46\1\u0143\15\46\1\0\3\46\2\0\1\46"+
    "\2\0\10\46\32\0\11\46\1\u0144\21\46\1\0\3\46"+
    "\2\0\1\46\2\0\10\46\32\0\3\46\1\u0145\27\46"+
    "\1\0\3\46\2\0\1\46\2\0\10\46\32\0\11\46"+
    "\1\u0146\21\46\1\0\3\46\2\0\1\46\2\0\10\46"+
    "\32\0\2\46\1\u0147\30\46\1\0\3\46\2\0\1\46"+
    "\2\0\10\46\32\0\1\u0148\105\0\17\46\1\u0149\13\46"+
    "\1\0\3\46\2\0\1\46\2\0\10\46\41\0\1\u014a"+
    "\76\0\3\46\1\u014b\27\46\1\0\3\46\2\0\1\46"+
    "\2\0\10\46\32\0\15\46\1\u014c\15\46\1\0\3\46"+
    "\2\0\1\46\2\0\10\46\32\0\6\46\1\u014d\24\46"+
    "\1\0\3\46\2\0\1\46\2\0\10\46\32\0\5\46"+
    "\1\u014e\25\46\1\0\3\46\2\0\1\46\2\0\10\46"+
    "\32\0\7\46\1\u014f\23\46\1\0\3\46\2\0\1\46"+
    "\2\0\10\46\32\0\17\46\1\u0150\13\46\1\0\3\46"+
    "\2\0\1\46\2\0\10\46\32\0\10\46\1\u0151\22\46"+
    "\1\0\3\46\2\0\1\46\2\0\10\46\35\0\1\u0152"+
    "\102\0\7\46\1\u0153\23\46\1\0\3\46\2\0\1\46"+
    "\2\0\10\46\34\0\1\u0154\103\0\23\46\1\u0155\7\46"+
    "\1\0\3\46\2\0\1\46\2\0\10\46\32\0\6\46"+
    "\1\u0156\24\46\1\0\3\46\2\0\1\46\2\0\10\46"+
    "\32\0\1\u0157\32\46\1\0\3\46\2\0\1\46\2\0"+
    "\10\46\32\0\3\46\1\u0158\27\46\1\0\3\46\2\0"+
    "\1\46\2\0\10\46\32\0\7\46\1\u0159\23\46\1\0"+
    "\3\46\2\0\1\46\2\0\10\46\43\0\1\u015a\74\0"+
    "\11\46\1\u015b\21\46\1\0\3\46\2\0\1\46\2\0"+
    "\10\46\32\0\22\46\1\u015c\10\46\1\0\3\46\2\0"+
    "\1\46\2\0\10\46\32\0\6\46\1\u015d\24\46\1\0"+
    "\3\46\2\0\1\46\2\0\10\46\32\0\6\46\1\u015e"+
    "\24\46\1\0\3\46\2\0\1\46\2\0\10\46\32\0"+
    "\22\46\1\u015f\10\46\1\0\3\46\2\0\1\46\2\0"+
    "\10\46\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17360];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\3\11\1\1\3\11\1\1\1\11\2\1\1\11"+
    "\4\1\5\11\1\1\2\11\27\1\2\11\1\1\1\11"+
    "\3\1\2\11\1\1\1\11\1\1\1\11\1\0\3\11"+
    "\1\1\3\11\64\1\1\0\3\1\1\11\2\0\1\11"+
    "\106\1\1\0\26\1\1\0\51\1\1\0\2\1\1\0"+
    "\26\1\1\0\2\1\1\0\20\1\1\0\2\1\1\0"+
    "\15\1\1\0\1\1\1\0\7\1\1\0\1\1\1\11"+
    "\5\1\1\11\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[351];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
 public String alloy_filename="";
 public int alloy_lineoffset=0; // If not zero, it is added to the current LINE NUMBER
 public List<Object> alloy_seenDollar;
 public DashModule alloy_module;
 private final Pos alloy_here(String txt) {
    return new Pos(alloy_filename,yycolumn+1,yyline+1+alloy_lineoffset,yycolumn+txt.length(),yyline+1);
 }
 private final Symbol alloy_sym(String txt, int type) {
    Pos p = alloy_here(txt); return new Symbol(type, p, p);
 }
 private final Symbol alloy_string(String txt) throws Err {
    Pos p = alloy_here(txt);
    if (!Version.experimental) throw new ErrorSyntax(p, "String literal is not currently supported.");
    StringBuilder sb = new StringBuilder(txt.length());
    for(int i=0; i<txt.length(); i++) {
       char c = txt.charAt(i);
       if (c=='\r' || c=='\n') throw new ErrorSyntax(p, "String literal cannot span multiple lines; use \\n instead.");
       if (c=='\\') {
          i++;
          if (i>=txt.length()) throw new ErrorSyntax(p, "String literal cannot end with a single \\");
          c = txt.charAt(i);
          if (c=='n') c='\n'; else if (c!='\'' && c!='\"' && c!='\\') throw new ErrorSyntax(p, "String literal currenty only supports\nfour escape sequences: \\\\, \\n, \\\', and \\\"");
       }
       sb.append(c);
    }
    txt = sb.toString();
    if (txt.length()==2) throw new ErrorSyntax(p, "Empty string is not allowed; try rewriting your model to use an empty set instead.");
    return new Symbol(DashSym.STR, p, ExprConstant.Op.STRING.make(p, txt));
 }
 private final Symbol alloy_id(String txt) throws Err {
    Pos p=alloy_here(txt);
    if (alloy_seenDollar.size()==0 && txt.indexOf('$')>=0) alloy_seenDollar.add(null);
    return new Symbol(DashSym.ID, p, ExprVar.make(p,txt));
 }
 private final Symbol alloy_num(String txt) throws Err {
    Pos p=alloy_here(txt);
    int n=0;
    try {
        txt = txt.replaceAll("_","");
        n=Integer.parseInt(txt);
    } catch(NumberFormatException ex) {
       throw new ErrorSyntax(p, "The number "+txt+" " + ex);
    }
    return new Symbol(DashSym.NUMBER, p, ExprConstant.Op.NUMBER.make(p, n));
 }
 private final Symbol alloy_hexnum(String txt) throws Err {
    Pos p=alloy_here(txt);
    int n=0;
    try {
        txt = txt.substring(2).replaceAll("_","");
        n=Integer.parseInt(txt, 16);
    } catch(NumberFormatException ex) {
       throw new ErrorSyntax(p, "The hex number "+txt+" " + ex);
    }
    return new Symbol(DashSym.NUMBER, p, ExprConstant.Op.NUMBER.make(p, n));
 }
 private final Symbol alloy_binarynum(String txt) throws Err {
    Pos p=alloy_here(txt);
    int n=0;
    try {
        txt = txt.substring(2).replaceAll("_","");
        n=Integer.parseInt(txt, 2);
    } catch(NumberFormatException ex) {
       throw new ErrorSyntax(p, "The binary number "+txt+" " + ex);
    }
    return new Symbol(DashSym.NUMBER, p, ExprConstant.Op.NUMBER.make(p, n));
 }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public DashLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public DashLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2280) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 74: 
          { return alloy_sym(yytext(), DashSym.NONE        );
          }
        case 119: break;
        case 4: 
          { return alloy_sym(yytext(), DashSym.AMPERSAND   );
          }
        case 120: break;
        case 18: 
          { return alloy_sym(yytext(), DashSym.LBRACKET    );
          }
        case 121: break;
        case 77: 
          { return alloy_sym(yytext(), DashSym.ENUM        );
          }
        case 122: break;
        case 54: 
          { return alloy_sym(yytext(), DashSym.SEQ         );
          }
        case 123: break;
        case 114: 
          { return alloy_sym(yytext(), DashSym.DEF         );
          }
        case 124: break;
        case 110: 
          { return alloy_sym(yytext(), DashSym.ABSTRACT    );
          }
        case 125: break;
        case 87: 
          { return alloy_sym(yytext(), DashSym.FROM        );
          }
        case 126: break;
        case 68: 
          { return alloy_binarynum (yytext());
          }
        case 127: break;
        case 40: 
          { return alloy_sym(yytext(), DashSym.IMPLIES     );
          }
        case 128: break;
        case 78: 
          { return alloy_sym(yytext(), DashSym.EXIT        );
          }
        case 129: break;
        case 118: 
          { return alloy_sym(yytext(), DashSym.HISTORICALLY);
          }
        case 130: break;
        case 112: 
          { return alloy_sym(yytext(), DashSym.TRIGGERED   );
          }
        case 131: break;
        case 106: 
          { return alloy_sym(yytext(), DashSym.DEFAULT     );
          }
        case 132: break;
        case 63: 
          { return alloy_sym(yytext(), DashSym.VAR         );
          }
        case 133: break;
        case 107: 
          { return alloy_sym(yytext(), DashSym.EXACTLY     );
          }
        case 134: break;
        case 96: 
          { return alloy_sym(yytext(), DashSym.ENTER       );
          }
        case 135: break;
        case 58: 
          { return alloy_sym(yytext(), DashSym.LET         );
          }
        case 136: break;
        case 116: 
          { return alloy_sym(yytext(), DashSym.CONC        );
          }
        case 137: break;
        case 57: 
          { return alloy_sym(yytext(), DashSym.RUN         );
          }
        case 138: break;
        case 38: 
          { return alloy_sym(yytext(), DashSym.SHL         );
          }
        case 139: break;
        case 1: 
          { throw new ErrorSyntax(alloy_here(" "), "Syntax error at the "+yytext()+" character. HEX: \\u"+Integer.toString(yytext().charAt(0),16)+")");
          }
        case 140: break;
        case 44: 
          { return alloy_sym(yytext(), DashSym.DO          );
          }
        case 141: break;
        case 24: 
          { return alloy_sym(yytext(), DashSym.TILDE       );
          }
        case 142: break;
        case 111: 
          { return alloy_sym(yytext(), DashSym.RELEASES    );
          }
        case 143: break;
        case 80: 
          { return alloy_sym(yytext(), DashSym.INIT        );
          }
        case 144: break;
        case 92: 
          { return alloy_sym(yytext(), DashSym.TIME        );
          }
        case 145: break;
        case 21: 
          { return alloy_sym(yytext(), DashSym.LBRACE      );
          }
        case 146: break;
        case 7: 
          { return alloy_sym(yytext(), DashSym.STAR        );
          }
        case 147: break;
        case 23: 
          { return alloy_sym(yytext(), DashSym.RBRACE      );
          }
        case 148: break;
        case 32: 
          { return alloy_sym(yytext(), DashSym.PLUSPLUS    );
          }
        case 149: break;
        case 37: 
          { return alloy_sym(yytext(), DashSym.DOMAIN      );
          }
        case 150: break;
        case 60: 
          { return alloy_sym(yytext(), DashSym.EXH         );
          }
        case 151: break;
        case 66: 
          { return alloy_sym(yytext(), DashSym.SIGINT      );
          }
        case 152: break;
        case 61: 
          { return alloy_sym(yytext(), DashSym.INT         );
          }
        case 153: break;
        case 56: 
          { return alloy_sym(yytext(), DashSym.SIG         );
          }
        case 154: break;
        case 85: 
          { return alloy_sym(yytext(), DashSym.PRED        );
          }
        case 155: break;
        case 73: 
          { return alloy_sym(yytext(), DashSym.LONE        );
          }
        case 156: break;
        case 64: 
          { return alloy_sym(yytext(), DashSym.FUN         );
          }
        case 157: break;
        case 9: 
          { return alloy_sym(yytext(), DashSym.COMMA       );
          }
        case 158: break;
        case 43: 
          { return alloy_sym(yytext(), DashSym.NO          );
          }
        case 159: break;
        case 25: 
          { return alloy_id  (yytext());
          }
        case 160: break;
        case 97: 
          { return alloy_sym(yytext(), DashSym.EVENT       );
          }
        case 161: break;
        case 42: 
          { return alloy_sym(yytext(), DashSym.AS          );
          }
        case 162: break;
        case 72: 
          { return alloy_sym(yytext(), DashSym.THIS        );
          }
        case 163: break;
        case 105: 
          { return alloy_sym(yytext(), DashSym.STRING      );
          }
        case 164: break;
        case 52: 
          { return alloy_sym(yytext(), DashSym.BUT         );
          }
        case 165: break;
        case 75: 
          { return alloy_sym(yytext(), DashSym.DISJ        );
          }
        case 166: break;
        case 27: 
          { return alloy_sym(yytext(), DashSym.PRIME       );
          }
        case 167: break;
        case 93: 
          { return alloy_sym(yytext(), DashSym.SINCE       );
          }
        case 168: break;
        case 47: 
          { return alloy_string(yytext());
          }
        case 169: break;
        case 41: 
          { return alloy_sym(yytext(), DashSym.OR          );
          }
        case 170: break;
        case 113: 
          { return alloy_sym(yytext(), DashSym.CONDITION   );
          }
        case 171: break;
        case 59: 
          { return alloy_sym(yytext(), DashSym.ENV         );
          }
        case 172: break;
        case 13: 
          { return alloy_sym(yytext(), DashSym.SLASH       );
          }
        case 173: break;
        case 90: 
          { return alloy_sym(yytext(), DashSym.AFTER       );
          }
        case 174: break;
        case 109: 
          { return alloy_sym(yytext(), DashSym.PRIVATE     );
          }
        case 175: break;
        case 33: 
          { return alloy_sym(yytext(), DashSym.ARROW       );
          }
        case 176: break;
        case 35: 
          { return alloy_sym(yytext(), DashSym.GTE         );
          }
        case 177: break;
        case 91: 
          { return alloy_sym(yytext(), DashSym.STATE       );
          }
        case 178: break;
        case 34: 
          { return alloy_sym(yytext(), DashSym.SHA         );
          }
        case 179: break;
        case 94: 
          { return alloy_sym(yytext(), DashSym.TRANS       );
          }
        case 180: break;
        case 26: 
          { return alloy_sym(yytext(), DashSym.TRCSEQ      );
          }
        case 181: break;
        case 76: 
          { return alloy_sym(yytext(), DashSym.ELSE        );
          }
        case 182: break;
        case 12: 
          { return alloy_sym(yytext(), DashSym.DOT         );
          }
        case 183: break;
        case 49: 
          { return alloy_sym(yytext(), DashSym.SHR         );
          }
        case 184: break;
        case 8: 
          { return alloy_sym(yytext(), DashSym.PLUS        );
          }
        case 185: break;
        case 98: 
          { return alloy_sym(yytext(), DashSym.UNTIL       );
          }
        case 186: break;
        case 62: 
          { return alloy_sym(yytext(), DashSym.ONE         );
          }
        case 187: break;
        case 39: 
          { return alloy_sym(yytext(), DashSym.LTE         );
          }
        case 188: break;
        case 88: 
          { return alloy_sym(yytext(), DashSym.GOTO        );
          }
        case 189: break;
        case 83: 
          { return alloy_sym(yytext(), DashSym.OPEN        );
          }
        case 190: break;
        case 70: 
          { return alloy_sym(yytext(), DashSym.SEND        );
          }
        case 191: break;
        case 101: 
          { return alloy_sym(yytext(), DashSym.ALWAYS      );
          }
        case 192: break;
        case 20: 
          { return alloy_sym(yytext(), DashSym.CARET       );
          }
        case 193: break;
        case 69: 
          { return alloy_hexnum (yytext());
          }
        case 194: break;
        case 50: 
          { return alloy_sym(yytext(), DashSym.IFF         );
          }
        case 195: break;
        case 16: 
          { return alloy_sym(yytext(), DashSym.EQUALS      );
          }
        case 196: break;
        case 3: 
          { return alloy_sym(yytext(), DashSym.HASH        );
          }
        case 197: break;
        case 22: 
          { return alloy_sym(yytext(), DashSym.BAR         );
          }
        case 198: break;
        case 103: 
          { return alloy_sym(yytext(), DashSym.EXPECT      );
          }
        case 199: break;
        case 29: 
          { throw new ErrorSyntax(alloy_here(yytext()),"String literal is missing its closing \" character");
          }
        case 200: break;
        case 115: 
          { return alloy_sym(yytext(), DashSym.INVARIANT   );
          }
        case 201: break;
        case 82: 
          { return alloy_sym(yytext(), DashSym.ONCE        );
          }
        case 202: break;
        case 81: 
          { return alloy_sym(yytext(), DashSym.IDEN        );
          }
        case 203: break;
        case 30: 
          { return alloy_num (yytext());
          }
        case 204: break;
        case 17: 
          { return alloy_sym(yytext(), DashSym.AT          );
          }
        case 205: break;
        case 11: 
          { return alloy_sym(yytext(), DashSym.GT          );
          }
        case 206: break;
        case 104: 
          { return alloy_sym(yytext(), DashSym.MODULE      );
          }
        case 207: break;
        case 100: 
          { return alloy_sym(yytext(), DashSym.ACTION      );
          }
        case 208: break;
        case 14: 
          { return alloy_sym(yytext(), DashSym.COLON       );
          }
        case 209: break;
        case 55: 
          { return alloy_sym(yytext(), DashSym.SUM         );
          }
        case 210: break;
        case 84: 
          { return alloy_sym(yytext(), DashSym.PART        );
          }
        case 211: break;
        case 53: 
          { return alloy_sym(yytext(), DashSym.SET         );
          }
        case 212: break;
        case 2: 
          { return alloy_sym(yytext(), DashSym.NOT         );
          }
        case 213: break;
        case 102: 
          { return alloy_sym(yytext(), DashSym.BEFORE      );
          }
        case 214: break;
        case 108: 
          { return alloy_sym(yytext(), DashSym.EXTENDS     );
          }
        case 215: break;
        case 65: 
          { return alloy_sym(yytext(), DashSym.FOR         );
          }
        case 216: break;
        case 117: 
          { return alloy_sym(yytext(), DashSym.EVENTUALLY  );
          }
        case 217: break;
        case 45: 
          { return alloy_sym(yytext(), DashSym.IN          );
          }
        case 218: break;
        case 15: 
          { return alloy_sym(yytext(), DashSym.LT          );
          }
        case 219: break;
        case 46: 
          { return alloy_sym(yytext(), DashSym.ON          );
          }
        case 220: break;
        case 95: 
          { return alloy_sym(yytext(), DashSym.CHECK       );
          }
        case 221: break;
        case 31: 
          { return alloy_sym(yytext(), DashSym.AND         );
          }
        case 222: break;
        case 36: 
          { return alloy_sym(yytext(), DashSym.RANGE       );
          }
        case 223: break;
        case 71: 
          { return alloy_sym(yytext(), DashSym.SOME        );
          }
        case 224: break;
        case 79: 
          { return alloy_sym(yytext(), DashSym.UNIV        );
          }
        case 225: break;
        case 86: 
          { return alloy_sym(yytext(), DashSym.FACT        );
          }
        case 226: break;
        case 5: 
          { return alloy_sym(yytext(), DashSym.LPAREN      );
          }
        case 227: break;
        case 6: 
          { return alloy_sym(yytext(), DashSym.RPAREN      );
          }
        case 228: break;
        case 89: 
          { return alloy_sym(yytext(), DashSym.WHEN        );
          }
        case 229: break;
        case 19: 
          { return alloy_sym(yytext(), DashSym.RBRACKET    );
          }
        case 230: break;
        case 51: 
          { return alloy_sym(yytext(), DashSym.ALL         );
          }
        case 231: break;
        case 99: 
          { return alloy_sym(yytext(), DashSym.ASSERT      );
          }
        case 232: break;
        case 67: 
          { throw new ErrorSyntax(alloy_here(yytext()),"String literal cannot be followed by a legal identifier character.");
          }
        case 233: break;
        case 10: 
          { return alloy_sym(yytext(), DashSym.MINUS       );
          }
        case 234: break;
        case 28: 
          { 
          }
        case 235: break;
        case 48: 
          { throw new ErrorSyntax(alloy_here(yytext()),"Name cannot start with a number.");
          }
        case 236: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {   return new Symbol(DashSym.EOF, alloy_here(" "), alloy_here(" "));
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
