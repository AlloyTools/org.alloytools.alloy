/* The following code was generated by JFlex 1.4.1 on 15/01/22 9:49 PM */

// Alloy Analyzer 4 -- Copyright (c) 2006-2008, Felix Chang
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files
// (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify,
// merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
// OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

package ca.uwaterloo.watform.parser;

import edu.mit.csail.sdg.alloy4.Err;
import edu.mit.csail.sdg.alloy4.ErrorSyntax;
import edu.mit.csail.sdg.alloy4.Pos;
import edu.mit.csail.sdg.alloy4.Version;
import edu.mit.csail.sdg.ast.ExprConstant;
import edu.mit.csail.sdg.ast.ExprVar;
import java.util.List;
import java_cup.runtime.*;

/** Autogenerated by JFlex 1.4.1 */


public final class DashLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\77\1\101\1\66\1\0\1\101\1\100\16\77\4\0\1\62\1\1"+
    "\1\64\1\2\1\76\1\0\1\3\1\67\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\13\1\14\1\70\1\73\10\74\1\15\1\0\1\16"+
    "\1\17\1\12\1\0\1\20\6\72\2\76\1\56\11\76\1\61\7\76"+
    "\1\21\1\65\1\22\1\23\1\71\1\0\1\30\1\31\1\35\1\40"+
    "\1\41\1\55\1\60\1\43\1\45\1\46\1\44\1\36\1\50\1\37"+
    "\1\47\1\54\1\57\1\34\1\32\1\33\1\42\1\53\1\63\1\51"+
    "\1\52\1\76\1\24\1\25\1\26\1\27\41\77\2\0\4\75\4\0"+
    "\1\75\2\0\1\77\7\0\1\75\4\0\1\75\5\0\27\75\1\0"+
    "\37\75\1\0\u01ca\75\4\0\14\75\16\0\5\75\7\0\1\75\1\0"+
    "\1\75\21\0\160\77\5\75\1\0\2\75\2\0\4\75\10\0\1\75"+
    "\1\0\3\75\1\0\1\75\1\0\24\75\1\0\123\75\1\0\213\75"+
    "\1\0\5\77\2\0\236\75\11\0\46\75\2\0\1\75\7\0\47\75"+
    "\7\0\1\75\1\0\55\77\1\0\1\77\1\0\2\77\1\0\2\77"+
    "\1\0\1\77\10\0\33\75\5\0\3\75\15\0\5\77\6\0\1\75"+
    "\4\0\13\77\5\0\53\75\37\77\4\0\2\75\1\77\143\75\1\0"+
    "\1\75\10\77\1\0\6\77\2\75\2\77\1\0\4\77\2\75\12\77"+
    "\3\75\2\0\1\75\17\0\1\77\1\75\1\77\36\75\33\77\2\0"+
    "\131\75\13\77\1\75\16\0\12\77\41\75\11\77\2\75\4\0\1\75"+
    "\5\0\26\75\4\77\1\75\11\77\1\75\3\77\1\75\5\77\22\0"+
    "\31\75\3\77\104\0\1\75\1\0\13\75\67\0\33\77\1\0\4\77"+
    "\66\75\3\77\1\75\22\77\1\75\7\77\12\75\2\77\2\0\12\77"+
    "\1\0\7\75\1\0\7\75\1\0\3\77\1\0\10\75\2\0\2\75"+
    "\2\0\26\75\1\0\7\75\1\0\1\75\3\0\4\75\2\0\1\77"+
    "\1\75\7\77\2\0\2\77\2\0\3\77\1\75\10\0\1\77\4\0"+
    "\2\75\1\0\3\75\2\77\2\0\12\77\4\75\7\0\1\75\5\0"+
    "\3\77\1\0\6\75\4\0\2\75\2\0\26\75\1\0\7\75\1\0"+
    "\2\75\1\0\2\75\1\0\2\75\2\0\1\77\1\0\5\77\4\0"+
    "\2\77\2\0\3\77\3\0\1\77\7\0\4\75\1\0\1\75\7\0"+
    "\14\77\3\75\1\77\13\0\3\77\1\0\11\75\1\0\3\75\1\0"+
    "\26\75\1\0\7\75\1\0\2\75\1\0\5\75\2\0\1\77\1\75"+
    "\10\77\1\0\3\77\1\0\3\77\2\0\1\75\17\0\2\75\2\77"+
    "\2\0\12\77\1\0\1\75\17\0\3\77\1\0\10\75\2\0\2\75"+
    "\2\0\26\75\1\0\7\75\1\0\2\75\1\0\5\75\2\0\1\77"+
    "\1\75\7\77\2\0\2\77\2\0\3\77\10\0\2\77\4\0\2\75"+
    "\1\0\3\75\2\77\2\0\12\77\1\0\1\75\20\0\1\77\1\75"+
    "\1\0\6\75\3\0\3\75\1\0\4\75\3\0\2\75\1\0\1\75"+
    "\1\0\2\75\3\0\2\75\3\0\3\75\3\0\14\75\4\0\5\77"+
    "\3\0\3\77\1\0\4\77\2\0\1\75\6\0\1\77\16\0\12\77"+
    "\11\0\1\75\7\0\3\77\1\0\10\75\1\0\3\75\1\0\27\75"+
    "\1\0\12\75\1\0\5\75\3\0\1\75\7\77\1\0\3\77\1\0"+
    "\4\77\7\0\2\77\1\0\2\75\6\0\2\75\2\77\2\0\12\77"+
    "\22\0\2\77\1\0\10\75\1\0\3\75\1\0\27\75\1\0\12\75"+
    "\1\0\5\75\2\0\1\77\1\75\7\77\1\0\3\77\1\0\4\77"+
    "\7\0\2\77\7\0\1\75\1\0\2\75\2\77\2\0\12\77\1\0"+
    "\2\75\17\0\2\77\1\0\10\75\1\0\3\75\1\0\51\75\2\0"+
    "\1\75\7\77\1\0\3\77\1\0\4\77\1\75\10\0\1\77\10\0"+
    "\2\75\2\77\2\0\12\77\12\0\6\75\2\0\2\77\1\0\22\75"+
    "\3\0\30\75\1\0\11\75\1\0\1\75\2\0\7\75\3\0\1\77"+
    "\4\0\6\77\1\0\1\77\1\0\10\77\22\0\2\77\15\0\60\75"+
    "\1\77\2\75\7\77\4\0\10\75\10\77\1\0\12\77\47\0\2\75"+
    "\1\0\1\75\2\0\2\75\1\0\1\75\2\0\1\75\6\0\4\75"+
    "\1\0\7\75\1\0\3\75\1\0\1\75\1\0\1\75\2\0\2\75"+
    "\1\0\4\75\1\77\2\75\6\77\1\0\2\77\1\75\2\0\5\75"+
    "\1\0\1\75\1\0\6\77\2\0\12\77\2\0\4\75\40\0\1\75"+
    "\27\0\2\77\6\0\12\77\13\0\1\77\1\0\1\77\1\0\1\77"+
    "\4\0\2\77\10\75\1\0\44\75\4\0\24\77\1\0\2\77\5\75"+
    "\13\77\1\0\44\77\11\0\1\77\71\0\53\75\24\77\1\75\12\77"+
    "\6\0\6\75\4\77\4\75\3\77\1\75\3\77\2\75\7\77\3\75"+
    "\4\77\15\75\14\77\1\75\17\77\2\0\46\75\1\0\1\75\5\0"+
    "\1\75\2\0\53\75\1\0\u014d\75\1\0\4\75\2\0\7\75\1\0"+
    "\1\75\1\0\4\75\2\0\51\75\1\0\4\75\2\0\41\75\1\0"+
    "\4\75\2\0\7\75\1\0\1\75\1\0\4\75\2\0\17\75\1\0"+
    "\71\75\1\0\4\75\2\0\103\75\2\0\3\77\40\0\20\75\20\0"+
    "\125\75\14\0\u026c\75\2\0\21\75\1\0\32\75\5\0\113\75\3\0"+
    "\3\75\17\0\15\75\1\0\4\75\3\77\13\0\22\75\3\77\13\0"+
    "\22\75\2\77\14\0\15\75\1\0\3\75\1\0\2\77\14\0\64\75"+
    "\40\77\3\0\1\75\3\0\2\75\1\77\2\0\12\77\41\0\3\77"+
    "\2\0\12\77\6\0\130\75\10\0\51\75\1\77\1\75\5\0\106\75"+
    "\12\0\35\75\3\0\14\77\4\0\14\77\12\0\12\77\36\75\2\0"+
    "\5\75\13\0\54\75\4\0\21\77\7\75\2\77\6\0\12\77\46\0"+
    "\27\75\5\77\4\0\65\75\12\77\1\0\35\77\2\0\13\77\6\0"+
    "\12\77\15\0\1\75\130\0\5\77\57\75\21\77\7\75\4\0\12\77"+
    "\21\0\11\77\14\0\3\77\36\75\15\77\2\75\12\77\54\75\16\77"+
    "\14\0\44\75\24\77\10\0\12\77\3\0\3\75\12\77\44\75\122\0"+
    "\3\77\1\0\25\77\4\75\1\77\4\75\3\77\2\75\11\0\300\75"+
    "\47\77\25\0\4\77\u0116\75\2\0\6\75\2\0\46\75\2\0\6\75"+
    "\2\0\10\75\1\0\1\75\1\0\1\75\1\0\1\75\1\0\37\75"+
    "\2\0\65\75\1\0\7\75\1\0\1\75\3\0\3\75\1\0\7\75"+
    "\3\0\4\75\2\0\6\75\4\0\15\75\5\0\3\75\1\0\7\75"+
    "\16\0\5\77\32\0\5\77\20\0\2\75\23\0\1\75\13\0\5\77"+
    "\5\0\6\77\1\0\1\75\15\0\1\75\20\0\15\75\3\0\33\75"+
    "\25\0\15\77\4\0\1\77\3\0\14\77\21\0\1\75\4\0\1\75"+
    "\2\0\12\75\1\0\1\75\3\0\5\75\6\0\1\75\1\0\1\75"+
    "\1\0\1\75\1\0\4\75\1\0\13\75\2\0\4\75\5\0\5\75"+
    "\4\0\1\75\21\0\51\75\u0a77\0\57\75\1\0\57\75\1\0\205\75"+
    "\6\0\4\75\3\77\2\75\14\0\46\75\1\0\1\75\5\0\1\75"+
    "\2\0\70\75\7\0\1\75\17\0\1\77\27\75\11\0\7\75\1\0"+
    "\7\75\1\0\7\75\1\0\7\75\1\0\7\75\1\0\7\75\1\0"+
    "\7\75\1\0\7\75\1\0\40\77\57\0\1\75\u01d5\0\3\75\31\0"+
    "\11\75\6\77\1\0\5\75\2\0\5\75\4\0\126\75\2\0\2\77"+
    "\2\0\3\75\1\0\132\75\1\0\4\75\5\0\51\75\3\0\136\75"+
    "\21\0\33\75\65\0\20\75\u0200\0\u19b6\75\112\0\u51cd\75\63\0\u048d\75"+
    "\103\0\56\75\2\0\u010d\75\3\0\20\75\12\77\2\75\24\0\57\75"+
    "\1\77\4\0\12\77\1\0\31\75\7\0\1\77\120\75\2\77\45\0"+
    "\11\75\2\0\147\75\2\0\4\75\1\0\4\75\14\0\13\75\115\0"+
    "\12\75\1\77\3\75\1\77\4\75\1\77\27\75\5\77\20\0\1\75"+
    "\7\0\64\75\14\0\2\77\62\75\21\77\13\0\12\77\6\0\22\77"+
    "\6\75\3\0\1\75\4\0\12\77\34\75\10\77\2\0\27\75\15\77"+
    "\14\0\35\75\3\0\4\77\57\75\16\77\16\0\1\75\12\77\46\0"+
    "\51\75\16\77\11\0\3\75\1\77\10\75\2\77\2\0\12\77\6\0"+
    "\27\75\3\0\1\75\1\77\4\0\60\75\1\77\1\75\3\77\2\75"+
    "\2\77\5\75\2\77\1\75\1\77\1\75\30\0\3\75\2\0\13\75"+
    "\5\77\2\0\3\75\2\77\12\0\6\75\2\0\6\75\2\0\6\75"+
    "\11\0\7\75\1\0\7\75\221\0\43\75\10\77\1\0\2\77\2\0"+
    "\12\77\6\0\u2ba4\75\14\0\27\75\4\0\61\75\u2104\0\u016e\75\2\0"+
    "\152\75\46\0\7\75\14\0\5\75\5\0\1\75\1\77\12\75\1\0"+
    "\15\75\1\0\5\75\1\0\1\75\1\0\2\75\1\0\2\75\1\0"+
    "\154\75\41\0\u016b\75\22\0\100\75\2\0\66\75\50\0\15\75\3\0"+
    "\20\77\20\0\7\77\14\0\2\75\30\0\3\75\31\0\1\75\6\0"+
    "\5\75\1\0\207\75\2\0\1\77\4\0\1\75\13\0\12\77\7\0"+
    "\32\75\4\0\1\75\1\0\32\75\13\0\131\75\3\0\6\75\2\0"+
    "\6\75\2\0\6\75\2\0\3\75\3\0\2\75\3\0\2\75\22\0"+
    "\3\77\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\24\31\1\32\1\31\1\33\2\34\1\35\1\36"+
    "\1\32\1\37\1\40\1\41\1\0\1\42\1\43\1\44"+
    "\1\45\1\46\1\45\1\47\1\31\1\50\20\31\1\51"+
    "\2\31\1\52\5\31\1\53\3\31\1\47\1\54\14\31"+
    "\1\55\1\0\3\56\1\57\2\0\1\60\3\31\1\61"+
    "\1\35\1\62\1\31\1\63\1\31\1\64\1\65\1\66"+
    "\3\31\1\67\2\31\1\70\1\31\1\2\6\31\1\71"+
    "\2\31\1\72\4\31\1\73\4\31\1\60\1\74\7\31"+
    "\1\75\1\76\1\77\3\31\1\100\1\101\1\56\1\102"+
    "\1\0\1\32\4\31\1\103\1\104\1\31\1\105\3\31"+
    "\1\106\1\107\1\31\1\0\1\110\1\111\1\31\1\112"+
    "\3\31\1\113\2\31\1\114\1\115\1\31\1\116\1\31"+
    "\1\117\1\31\1\120\1\121\1\31\1\122\1\123\1\124"+
    "\1\31\1\125\3\31\1\126\1\127\1\130\1\0\2\31"+
    "\1\0\1\31\1\131\4\31\1\132\7\31\1\133\1\134"+
    "\1\0\2\31\1\0\4\31\1\135\2\31\1\136\2\31"+
    "\1\137\1\31\1\0\1\31\1\140\1\0\1\31\1\141"+
    "\1\142\2\31\1\46\1\31\1\143\1\144\1\0\1\31"+
    "\1\0\1\110\3\31\1\0\1\145\1\146\1\31\1\147"+
    "\1\120\1\150\1\72";

  private static int [] zzUnpackAction() {
    int [] result = new int[289];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\102\0\102\0\204\0\102\0\102\0\102"+
    "\0\306\0\102\0\u0108\0\u014a\0\102\0\u018c\0\u01ce\0\u0210"+
    "\0\u0252\0\102\0\102\0\102\0\102\0\102\0\u0294\0\102"+
    "\0\102\0\u02d6\0\u0318\0\u035a\0\u039c\0\u03de\0\u0420\0\u0462"+
    "\0\u04a4\0\u04e6\0\u0528\0\u056a\0\u05ac\0\u05ee\0\u0630\0\u0672"+
    "\0\u06b4\0\u06f6\0\u0738\0\u077a\0\u07bc\0\102\0\u07fe\0\u0840"+
    "\0\u0882\0\u08c4\0\102\0\102\0\u0906\0\102\0\u0948\0\102"+
    "\0\u098a\0\102\0\102\0\102\0\u09cc\0\102\0\102\0\102"+
    "\0\u0a0e\0\u0a50\0\u0a92\0\u0ad4\0\u0b16\0\u0b58\0\u0b9a\0\u0bdc"+
    "\0\u0c1e\0\u0c60\0\u0ca2\0\u0ce4\0\u0d26\0\u0d68\0\u0daa\0\u0dec"+
    "\0\u0e2e\0\u0e70\0\u0eb2\0\u0ef4\0\u0f36\0\u05ac\0\u0f78\0\u0fba"+
    "\0\u0ffc\0\u103e\0\u1080\0\u10c2\0\u1104\0\u1146\0\u1188\0\u05ac"+
    "\0\u11ca\0\u120c\0\u124e\0\u1290\0\u12d2\0\u1314\0\u1356\0\u1398"+
    "\0\u13da\0\u141c\0\u145e\0\u14a0\0\u14e2\0\u1524\0\u1566\0\u15a8"+
    "\0\u15ea\0\u162c\0\102\0\u166e\0\u16b0\0\102\0\u16f2\0\u1734"+
    "\0\u1776\0\u05ac\0\u05ac\0\u05ac\0\u17b8\0\u05ac\0\u17fa\0\u05ac"+
    "\0\u05ac\0\u05ac\0\u183c\0\u187e\0\u18c0\0\u05ac\0\u1902\0\u1944"+
    "\0\u05ac\0\u1986\0\u05ac\0\u19c8\0\u1a0a\0\u1a4c\0\u1a8e\0\u1ad0"+
    "\0\u1b12\0\u05ac\0\u1b54\0\u1b96\0\u1bd8\0\u1c1a\0\u1c5c\0\u1c9e"+
    "\0\u1ce0\0\u05ac\0\u1d22\0\u1d64\0\u1da6\0\u1de8\0\u05ac\0\u05ac"+
    "\0\u1e2a\0\u1e6c\0\u1eae\0\u1ef0\0\u1f32\0\u1f74\0\u1fb6\0\u05ac"+
    "\0\u05ac\0\u05ac\0\u1ff8\0\u203a\0\u207c\0\u1524\0\u15ea\0\u20be"+
    "\0\u162c\0\u2100\0\u166e\0\u2142\0\u2184\0\u21c6\0\u2208\0\u05ac"+
    "\0\u05ac\0\u224a\0\u05ac\0\u228c\0\u22ce\0\u2310\0\u05ac\0\u05ac"+
    "\0\u2352\0\u2394\0\u23d6\0\u05ac\0\u2418\0\u05ac\0\u245a\0\u249c"+
    "\0\u24de\0\u05ac\0\u2520\0\u2562\0\u05ac\0\u05ac\0\u25a4\0\u05ac"+
    "\0\u25e6\0\u05ac\0\u2628\0\u266a\0\u05ac\0\u26ac\0\u05ac\0\u05ac"+
    "\0\u05ac\0\u26ee\0\u05ac\0\u2730\0\u2772\0\u27b4\0\u05ac\0\u05ac"+
    "\0\u05ac\0\u27f6\0\u2838\0\u287a\0\u28bc\0\u28fe\0\u05ac\0\u2940"+
    "\0\u2982\0\u29c4\0\u2a06\0\u05ac\0\u2a48\0\u2a8a\0\u2acc\0\u2b0e"+
    "\0\u2b50\0\u2b92\0\u2bd4\0\u05ac\0\u05ac\0\u2c16\0\u2c58\0\u2c9a"+
    "\0\u2cdc\0\u2d1e\0\u2d60\0\u2da2\0\u2de4\0\u05ac\0\u2e26\0\u2e68"+
    "\0\u05ac\0\u2eaa\0\u2eec\0\u05ac\0\u2f2e\0\u2f70\0\u2fb2\0\u05ac"+
    "\0\u2ff4\0\u3036\0\u05ac\0\u05ac\0\u3078\0\u30ba\0\u05ac\0\u30fc"+
    "\0\u05ac\0\u05ac\0\u313e\0\u3180\0\u31c2\0\u05ac\0\u3204\0\u3246"+
    "\0\u3288\0\u32ca\0\u05ac\0\102\0\u330c\0\u05ac\0\u05ac\0\102"+
    "\0\u05ac";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[289];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\2\45\1\46\1\45\1\47\1\50"+
    "\3\45\1\51\1\52\1\53\1\45\1\54\1\55\1\56"+
    "\1\57\1\60\1\2\1\56\1\2\1\61\2\45\2\62"+
    "\2\45\1\2\2\56\105\0\1\63\105\0\1\64\103\0"+
    "\1\65\1\66\101\0\1\67\4\0\1\70\70\0\1\71"+
    "\5\0\1\65\77\0\1\72\2\0\1\15\101\0\1\73"+
    "\1\74\1\75\74\0\1\76\3\0\1\77\110\0\1\100"+
    "\104\0\1\45\1\101\1\102\2\45\1\103\1\104\1\105"+
    "\22\45\1\0\2\45\2\0\11\45\32\0\12\45\1\106"+
    "\17\45\1\0\2\45\2\0\11\45\32\0\3\45\1\107"+
    "\5\45\1\110\1\111\2\45\1\112\1\45\1\113\12\45"+
    "\1\0\2\45\2\0\11\45\32\0\4\45\1\114\6\45"+
    "\1\115\16\45\1\0\2\45\2\0\11\45\32\0\12\45"+
    "\1\116\17\45\1\0\2\45\2\0\11\45\32\0\13\45"+
    "\1\117\3\45\1\120\12\45\1\0\2\45\2\0\11\45"+
    "\32\0\11\45\1\121\5\45\1\122\12\45\1\0\2\45"+
    "\2\0\11\45\32\0\17\45\1\123\12\45\1\0\2\45"+
    "\2\0\11\45\32\0\11\45\1\124\3\45\1\125\1\45"+
    "\1\126\12\45\1\0\2\45\2\0\11\45\32\0\6\45"+
    "\1\127\1\130\11\45\1\131\1\45\1\132\6\45\1\0"+
    "\2\45\2\0\11\45\32\0\7\45\1\133\22\45\1\0"+
    "\2\45\2\0\11\45\32\0\32\45\1\0\2\45\2\0"+
    "\11\45\32\0\7\45\1\134\1\135\7\45\1\136\4\45"+
    "\1\137\4\45\1\0\2\45\2\0\11\45\32\0\4\45"+
    "\1\140\2\45\1\141\14\45\1\142\5\45\1\0\2\45"+
    "\2\0\11\45\32\0\17\45\1\143\12\45\1\0\2\45"+
    "\2\0\11\45\32\0\1\144\3\45\1\145\25\45\1\0"+
    "\2\45\2\0\11\45\32\0\1\146\3\45\1\147\5\45"+
    "\1\150\4\45\1\151\12\45\1\0\2\45\2\0\11\45"+
    "\32\0\7\45\1\152\22\45\1\0\2\45\2\0\11\45"+
    "\32\0\17\45\1\153\12\45\1\0\2\45\2\0\11\45"+
    "\32\0\3\45\1\154\26\45\1\0\2\45\2\0\11\45"+
    "\32\0\13\45\1\155\16\45\1\0\2\45\2\0\11\45"+
    "\2\0\64\60\1\156\1\157\14\60\30\0\1\160\1\161"+
    "\17\160\1\162\10\160\1\0\2\160\2\0\1\160\1\62"+
    "\2\160\2\62\1\0\1\160\33\0\32\160\1\0\2\160"+
    "\2\0\1\160\1\62\2\160\2\62\1\0\1\160\3\0"+
    "\66\65\1\56\11\65\1\56\1\65\12\0\1\163\67\0"+
    "\6\164\1\165\73\164\12\0\1\166\117\0\2\45\1\167"+
    "\27\45\1\0\2\45\2\0\11\45\32\0\2\45\1\170"+
    "\27\45\1\0\2\45\2\0\11\45\32\0\3\45\1\171"+
    "\26\45\1\0\2\45\2\0\11\45\32\0\6\45\1\172"+
    "\23\45\1\0\2\45\2\0\11\45\32\0\10\45\1\173"+
    "\21\45\1\0\2\45\2\0\11\45\32\0\3\45\1\174"+
    "\26\45\1\0\2\45\2\0\11\45\32\0\1\175\31\45"+
    "\1\0\2\45\2\0\11\45\32\0\3\45\1\176\3\45"+
    "\1\177\17\45\1\200\2\45\1\0\2\45\2\0\11\45"+
    "\32\0\20\45\1\201\11\45\1\0\2\45\2\0\11\45"+
    "\32\0\30\45\1\202\1\45\1\0\2\45\2\0\11\45"+
    "\32\0\20\45\1\203\11\45\1\0\2\45\2\0\11\45"+
    "\32\0\1\204\31\45\1\0\2\45\2\0\11\45\32\0"+
    "\15\45\1\205\14\45\1\0\2\45\2\0\11\45\32\0"+
    "\7\45\1\206\22\45\1\0\2\45\2\0\11\45\32\0"+
    "\11\45\1\207\20\45\1\0\2\45\2\0\11\45\32\0"+
    "\7\45\1\210\22\45\1\0\2\45\2\0\11\45\32\0"+
    "\3\45\1\211\26\45\1\0\2\45\2\0\11\45\32\0"+
    "\7\45\1\212\22\45\1\0\2\45\2\0\11\45\32\0"+
    "\3\45\1\213\3\45\1\214\22\45\1\0\2\45\2\0"+
    "\11\45\32\0\25\45\1\215\4\45\1\0\2\45\2\0"+
    "\11\45\32\0\2\45\1\216\27\45\1\0\2\45\2\0"+
    "\11\45\32\0\2\45\1\217\27\45\1\0\2\45\2\0"+
    "\11\45\32\0\3\45\1\220\6\45\1\221\10\45\1\222"+
    "\6\45\1\0\2\45\2\0\11\45\32\0\1\223\2\45"+
    "\1\224\7\45\1\225\1\45\1\226\6\45\1\227\5\45"+
    "\1\0\2\45\2\0\11\45\32\0\11\45\1\230\20\45"+
    "\1\0\2\45\2\0\11\45\32\0\15\45\1\231\14\45"+
    "\1\0\2\45\2\0\11\45\32\0\3\45\1\232\11\45"+
    "\1\233\5\45\1\234\6\45\1\0\2\45\2\0\11\45"+
    "\32\0\11\45\1\235\20\45\1\0\2\45\2\0\11\45"+
    "\32\0\24\45\1\236\5\45\1\0\2\45\2\0\11\45"+
    "\32\0\25\45\1\237\4\45\1\0\2\45\2\0\11\45"+
    "\32\0\11\45\1\240\20\45\1\0\2\45\2\0\11\45"+
    "\32\0\11\45\1\241\20\45\1\0\2\45\2\0\11\45"+
    "\32\0\10\45\1\242\21\45\1\0\2\45\2\0\11\45"+
    "\32\0\4\45\1\243\25\45\1\0\2\45\2\0\11\45"+
    "\32\0\11\45\1\244\3\45\1\245\14\45\1\0\2\45"+
    "\2\0\11\45\32\0\5\45\1\246\24\45\1\0\2\45"+
    "\2\0\11\45\32\0\17\45\1\247\12\45\1\0\2\45"+
    "\2\0\11\45\32\0\7\45\1\250\22\45\1\0\2\45"+
    "\2\0\11\45\32\0\4\45\1\251\25\45\1\0\2\45"+
    "\2\0\11\45\32\0\3\45\1\252\26\45\1\0\2\45"+
    "\2\0\11\45\32\0\3\45\1\253\26\45\1\0\2\45"+
    "\2\0\11\45\32\0\4\45\1\254\25\45\1\0\2\45"+
    "\2\0\11\45\32\0\11\45\1\255\20\45\1\0\2\45"+
    "\2\0\11\45\32\0\32\256\1\0\2\256\2\0\6\256"+
    "\1\0\1\256\3\0\66\60\1\0\13\60\30\0\32\160"+
    "\1\0\2\160\2\0\6\160\1\0\1\160\33\0\32\160"+
    "\1\0\2\160\2\0\1\160\2\257\1\160\1\257\1\160"+
    "\1\0\1\160\33\0\2\260\3\160\1\260\2\160\2\260"+
    "\13\160\1\260\4\160\1\0\2\160\2\0\1\160\1\260"+
    "\1\261\3\260\1\0\1\160\3\0\6\164\1\262\101\164"+
    "\1\262\5\164\1\263\65\164\30\0\3\45\1\264\26\45"+
    "\1\0\2\45\2\0\11\45\32\0\11\45\1\265\20\45"+
    "\1\0\2\45\2\0\11\45\32\0\15\45\1\266\14\45"+
    "\1\0\2\45\2\0\11\45\32\0\3\45\1\267\26\45"+
    "\1\0\2\45\2\0\11\45\32\0\10\45\1\270\21\45"+
    "\1\0\2\45\2\0\11\45\32\0\11\45\1\271\20\45"+
    "\1\0\2\45\2\0\11\45\32\0\7\45\1\272\22\45"+
    "\1\0\2\45\2\0\11\45\32\0\2\45\1\273\27\45"+
    "\1\0\2\45\2\0\11\45\32\0\5\45\1\274\24\45"+
    "\1\0\2\45\2\0\11\45\32\0\5\45\1\275\2\45"+
    "\1\276\21\45\1\0\2\45\2\0\11\45\32\0\11\45"+
    "\1\277\20\45\1\0\2\45\2\0\11\45\32\0\11\45"+
    "\1\300\20\45\1\0\2\45\2\0\11\45\32\0\1\301"+
    "\31\45\1\302\2\45\2\0\11\45\32\0\16\45\1\303"+
    "\13\45\1\0\2\45\2\0\11\45\32\0\11\45\1\304"+
    "\20\45\1\0\2\45\2\0\11\45\32\0\11\45\1\305"+
    "\20\45\1\0\2\45\2\0\11\45\32\0\20\45\1\306"+
    "\11\45\1\0\2\45\2\0\11\45\32\0\5\45\1\307"+
    "\24\45\1\0\2\45\2\0\11\45\32\0\11\45\1\310"+
    "\20\45\1\0\2\45\2\0\11\45\32\0\1\311\31\45"+
    "\1\0\2\45\2\0\11\45\32\0\3\45\1\312\26\45"+
    "\1\0\2\45\2\0\11\45\32\0\11\45\1\313\20\45"+
    "\1\0\2\45\2\0\11\45\32\0\7\45\1\314\22\45"+
    "\1\0\2\45\2\0\11\45\32\0\23\45\1\315\6\45"+
    "\1\0\2\45\2\0\11\45\32\0\3\45\1\316\26\45"+
    "\1\0\2\45\2\0\11\45\32\0\1\317\31\45\1\0"+
    "\2\45\2\0\11\45\32\0\7\45\1\320\22\45\1\0"+
    "\2\45\2\0\11\45\32\0\6\45\1\321\23\45\1\0"+
    "\2\45\2\0\11\45\32\0\7\45\1\322\22\45\1\0"+
    "\2\45\2\0\11\45\32\0\12\45\1\323\17\45\1\0"+
    "\2\45\2\0\11\45\32\0\3\45\1\324\26\45\1\0"+
    "\2\45\2\0\11\45\32\0\10\45\1\325\21\45\1\0"+
    "\2\45\2\0\11\45\32\0\23\45\1\326\6\45\1\0"+
    "\2\45\2\0\11\45\32\0\3\45\1\327\26\45\1\0"+
    "\2\45\2\0\11\45\32\0\20\45\1\330\11\45\1\0"+
    "\2\45\2\0\11\45\32\0\17\45\1\331\12\45\1\0"+
    "\2\45\2\0\11\45\32\0\15\45\1\332\14\45\1\0"+
    "\2\45\2\0\11\45\32\0\7\45\1\333\22\45\1\0"+
    "\2\45\2\0\11\45\32\0\2\261\3\160\1\261\2\160"+
    "\2\261\13\160\1\261\4\160\1\0\2\160\2\0\1\160"+
    "\1\261\1\160\3\261\1\0\1\160\3\0\6\164\1\262"+
    "\5\164\1\56\65\164\30\0\4\45\1\334\25\45\1\0"+
    "\2\45\2\0\11\45\32\0\4\45\1\335\25\45\1\0"+
    "\2\45\2\0\11\45\32\0\17\45\1\336\12\45\1\0"+
    "\2\45\2\0\11\45\32\0\11\45\1\337\20\45\1\0"+
    "\2\45\2\0\11\45\32\0\2\45\1\340\27\45\1\0"+
    "\2\45\2\0\11\45\32\0\14\45\1\341\15\45\1\0"+
    "\2\45\2\0\11\45\32\0\32\45\1\342\2\45\2\0"+
    "\11\45\32\0\15\45\1\343\14\45\1\0\2\45\2\0"+
    "\11\45\32\0\12\45\1\344\17\45\1\0\2\45\2\0"+
    "\11\45\35\0\1\345\76\0\17\45\1\346\12\45\1\0"+
    "\2\45\2\0\11\45\32\0\4\45\1\347\25\45\1\0"+
    "\2\45\2\0\11\45\32\0\3\45\1\350\26\45\1\0"+
    "\2\45\2\0\11\45\32\0\7\45\1\351\22\45\1\0"+
    "\2\45\2\0\11\45\32\0\12\45\1\352\17\45\1\0"+
    "\2\45\2\0\11\45\32\0\5\45\1\353\24\45\1\0"+
    "\2\45\2\0\11\45\32\0\3\45\1\354\26\45\1\0"+
    "\2\45\2\0\11\45\32\0\4\45\1\355\25\45\1\0"+
    "\2\45\2\0\11\45\32\0\15\45\1\356\14\45\1\0"+
    "\2\45\2\0\11\45\32\0\6\45\1\357\23\45\1\0"+
    "\2\45\2\0\11\45\32\0\15\45\1\360\14\45\1\0"+
    "\2\45\2\0\11\45\32\0\1\361\31\45\1\0\2\45"+
    "\2\0\11\45\32\0\7\45\1\362\22\45\1\0\2\45"+
    "\2\0\11\45\32\0\1\363\31\45\1\0\2\45\2\0"+
    "\11\45\32\0\3\45\1\364\26\45\1\0\2\45\2\0"+
    "\11\45\32\0\7\45\1\365\22\45\1\0\2\45\2\0"+
    "\11\45\34\0\1\366\77\0\3\45\1\367\26\45\1\0"+
    "\2\45\2\0\11\45\32\0\6\45\1\370\23\45\1\0"+
    "\2\45\2\0\11\45\36\0\1\371\75\0\15\45\1\372"+
    "\14\45\1\0\2\45\2\0\11\45\32\0\6\45\1\373"+
    "\23\45\1\0\2\45\2\0\11\45\32\0\10\45\1\374"+
    "\21\45\1\0\2\45\2\0\11\45\32\0\2\45\1\375"+
    "\27\45\1\0\2\45\2\0\11\45\32\0\3\45\1\376"+
    "\26\45\1\0\2\45\2\0\11\45\32\0\15\45\1\377"+
    "\14\45\1\0\2\45\2\0\11\45\32\0\11\45\1\u0100"+
    "\20\45\1\0\2\45\2\0\11\45\32\0\11\45\1\u0101"+
    "\20\45\1\0\2\45\2\0\11\45\32\0\3\45\1\u0102"+
    "\26\45\1\0\2\45\2\0\11\45\32\0\3\45\1\u0103"+
    "\26\45\1\0\2\45\2\0\11\45\32\0\30\45\1\u0104"+
    "\1\45\1\0\2\45\2\0\11\45\32\0\5\45\1\u0105"+
    "\24\45\1\0\2\45\2\0\11\45\35\0\1\u0106\76\0"+
    "\15\45\1\u0107\14\45\1\0\2\45\2\0\11\45\32\0"+
    "\3\45\1\u0108\26\45\1\0\2\45\2\0\11\45\32\0"+
    "\1\u0109\101\0\7\45\1\u010a\22\45\1\0\2\45\2\0"+
    "\11\45\32\0\22\45\1\u010b\7\45\1\0\2\45\2\0"+
    "\11\45\32\0\2\45\1\u010c\27\45\1\0\2\45\2\0"+
    "\11\45\32\0\3\45\1\u010d\26\45\1\0\2\45\2\0"+
    "\11\45\32\0\1\u010e\31\45\1\0\2\45\2\0\11\45"+
    "\32\0\2\45\1\u010f\27\45\1\0\2\45\2\0\11\45"+
    "\32\0\15\45\1\u0110\14\45\1\0\2\45\2\0\11\45"+
    "\32\0\11\45\1\u0111\20\45\1\0\2\45\2\0\11\45"+
    "\32\0\3\45\1\u0112\26\45\1\0\2\45\2\0\11\45"+
    "\32\0\1\u0113\101\0\17\45\1\u0114\12\45\1\0\2\45"+
    "\2\0\11\45\41\0\1\u0115\72\0\3\45\1\u0116\26\45"+
    "\1\0\2\45\2\0\11\45\32\0\15\45\1\u0117\14\45"+
    "\1\0\2\45\2\0\11\45\32\0\7\45\1\u0118\22\45"+
    "\1\0\2\45\2\0\11\45\32\0\17\45\1\u0119\12\45"+
    "\1\0\2\45\2\0\11\45\35\0\1\u011a\76\0\7\45"+
    "\1\u011b\22\45\1\0\2\45\2\0\11\45\34\0\1\u011c"+
    "\77\0\23\45\1\u011d\6\45\1\0\2\45\2\0\11\45"+
    "\32\0\3\45\1\u011e\26\45\1\0\2\45\2\0\11\45"+
    "\32\0\7\45\1\u011f\22\45\1\0\2\45\2\0\11\45"+
    "\43\0\1\u0120\70\0\11\45\1\u0121\20\45\1\0\2\45"+
    "\2\0\11\45\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[13134];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\3\11\1\1\3\11\1\1\1\11\2\1\1\11"+
    "\4\1\5\11\1\1\2\11\24\1\1\11\4\1\2\11"+
    "\1\1\1\11\1\1\1\11\1\0\3\11\1\1\3\11"+
    "\56\1\1\0\3\1\1\11\2\0\1\11\73\1\1\0"+
    "\17\1\1\0\37\1\1\0\2\1\1\0\20\1\1\0"+
    "\2\1\1\0\14\1\1\0\2\1\1\0\11\1\1\0"+
    "\1\1\1\0\4\1\1\0\1\1\1\11\3\1\1\11"+
    "\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[289];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
 public String alloy_filename="";
 public int alloy_lineoffset=0; // If not zero, it is added to the current LINE NUMBER
 public List<Object> alloy_seenDollar;
 public DashModule alloy_module;
 private final Pos alloy_here(String txt) {
    return new Pos(alloy_filename,yycolumn+1,yyline+1+alloy_lineoffset,yycolumn+txt.length(),yyline+1);
 }
 private final Symbol alloy_sym(String txt, int type) {
    Pos p = alloy_here(txt); return new Symbol(type, p, p);
 }
 private final Symbol alloy_string(String txt) throws Err {
    Pos p = alloy_here(txt);
    if (!Version.experimental) throw new ErrorSyntax(p, "String literal is not currently supported.");
    StringBuilder sb = new StringBuilder(txt.length());
    for(int i=0; i<txt.length(); i++) {
       char c = txt.charAt(i);
       if (c=='\r' || c=='\n') throw new ErrorSyntax(p, "String literal cannot span multiple lines; use \\n instead.");
       if (c=='\\') {
          i++;
          if (i>=txt.length()) throw new ErrorSyntax(p, "String literal cannot end with a single \\");
          c = txt.charAt(i);
          if (c=='n') c='\n'; else if (c!='\'' && c!='\"' && c!='\\') throw new ErrorSyntax(p, "String literal currenty only supports\nfour escape sequences: \\\\, \\n, \\\', and \\\"");
       }
       sb.append(c);
    }
    txt = sb.toString();
    if (txt.length()==2) throw new ErrorSyntax(p, "Empty string is not allowed; try rewriting your model to use an empty set instead.");
    return new Symbol(DashSym.STR, p, ExprConstant.Op.STRING.make(p, txt));
 }
 private final Symbol alloy_id(String txt) throws Err {
    Pos p=alloy_here(txt);
    if (alloy_seenDollar.size()==0 && txt.indexOf('$')>=0) alloy_seenDollar.add(null);
    return new Symbol(DashSym.ID, p, ExprVar.make(p,txt));
 }
 private final Symbol alloy_num(String txt) throws Err {
    Pos p=alloy_here(txt);
    int n=0;
    try {
        txt = txt.replaceAll("_","");
        n=Integer.parseInt(txt);
    } catch(NumberFormatException ex) {
       throw new ErrorSyntax(p, "The number "+txt+" " + ex);
    }
    return new Symbol(DashSym.NUMBER, p, ExprConstant.Op.NUMBER.make(p, n));
 }
 private final Symbol alloy_hexnum(String txt) throws Err {
    Pos p=alloy_here(txt);
    int n=0;
    try {
        txt = txt.substring(2).replaceAll("_","");
        n=Integer.parseInt(txt, 16);
    } catch(NumberFormatException ex) {
       throw new ErrorSyntax(p, "The hex number "+txt+" " + ex);
    }
    return new Symbol(DashSym.NUMBER, p, ExprConstant.Op.NUMBER.make(p, n));
 }
 private final Symbol alloy_binarynum(String txt) throws Err {
    Pos p=alloy_here(txt);
    int n=0;
    try {
        txt = txt.substring(2).replaceAll("_","");
        n=Integer.parseInt(txt, 2);
    } catch(NumberFormatException ex) {
       throw new ErrorSyntax(p, "The binary number "+txt+" " + ex);
    }
    return new Symbol(DashSym.NUMBER, p, ExprConstant.Op.NUMBER.make(p, n));
 }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public DashLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public DashLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2264) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 71: 
          { return alloy_sym(yytext(), DashSym.NONE        );
          }
        case 105: break;
        case 4: 
          { return alloy_sym(yytext(), DashSym.AMPERSAND   );
          }
        case 106: break;
        case 18: 
          { return alloy_sym(yytext(), DashSym.LBRACKET    );
          }
        case 107: break;
        case 74: 
          { return alloy_sym(yytext(), DashSym.ENUM        );
          }
        case 108: break;
        case 52: 
          { return alloy_sym(yytext(), DashSym.SEQ         );
          }
        case 109: break;
        case 102: 
          { return alloy_sym(yytext(), DashSym.DEF         );
          }
        case 110: break;
        case 100: 
          { return alloy_sym(yytext(), DashSym.ABSTRACT    );
          }
        case 111: break;
        case 83: 
          { return alloy_sym(yytext(), DashSym.FROM        );
          }
        case 112: break;
        case 65: 
          { return alloy_binarynum (yytext());
          }
        case 113: break;
        case 38: 
          { return alloy_sym(yytext(), DashSym.IMPLIES     );
          }
        case 114: break;
        case 75: 
          { return alloy_sym(yytext(), DashSym.EXIT        );
          }
        case 115: break;
        case 96: 
          { return alloy_sym(yytext(), DashSym.DEFAULT     );
          }
        case 116: break;
        case 97: 
          { return alloy_sym(yytext(), DashSym.EXACTLY     );
          }
        case 117: break;
        case 89: 
          { return alloy_sym(yytext(), DashSym.ENTER       );
          }
        case 118: break;
        case 56: 
          { return alloy_sym(yytext(), DashSym.LET         );
          }
        case 119: break;
        case 104: 
          { return alloy_sym(yytext(), DashSym.CONC        );
          }
        case 120: break;
        case 55: 
          { return alloy_sym(yytext(), DashSym.RUN         );
          }
        case 121: break;
        case 36: 
          { return alloy_sym(yytext(), DashSym.SHL         );
          }
        case 122: break;
        case 1: 
          { throw new ErrorSyntax(alloy_here(" "), "Syntax error at the "+yytext()+" character. HEX: \\u"+Integer.toString(yytext().charAt(0),16)+")");
          }
        case 123: break;
        case 42: 
          { return alloy_sym(yytext(), DashSym.DO          );
          }
        case 124: break;
        case 24: 
          { return alloy_sym(yytext(), DashSym.TILDE       );
          }
        case 125: break;
        case 77: 
          { return alloy_sym(yytext(), DashSym.INIT        );
          }
        case 126: break;
        case 21: 
          { return alloy_sym(yytext(), DashSym.LBRACE      );
          }
        case 127: break;
        case 7: 
          { return alloy_sym(yytext(), DashSym.STAR        );
          }
        case 128: break;
        case 23: 
          { return alloy_sym(yytext(), DashSym.RBRACE      );
          }
        case 129: break;
        case 30: 
          { return alloy_sym(yytext(), DashSym.PLUSPLUS    );
          }
        case 130: break;
        case 35: 
          { return alloy_sym(yytext(), DashSym.DOMAIN      );
          }
        case 131: break;
        case 58: 
          { return alloy_sym(yytext(), DashSym.EXH         );
          }
        case 132: break;
        case 63: 
          { return alloy_sym(yytext(), DashSym.SIGINT      );
          }
        case 133: break;
        case 59: 
          { return alloy_sym(yytext(), DashSym.INT         );
          }
        case 134: break;
        case 54: 
          { return alloy_sym(yytext(), DashSym.SIG         );
          }
        case 135: break;
        case 81: 
          { return alloy_sym(yytext(), DashSym.PRED        );
          }
        case 136: break;
        case 70: 
          { return alloy_sym(yytext(), DashSym.LONE        );
          }
        case 137: break;
        case 61: 
          { return alloy_sym(yytext(), DashSym.FUN         );
          }
        case 138: break;
        case 9: 
          { return alloy_sym(yytext(), DashSym.COMMA       );
          }
        case 139: break;
        case 41: 
          { return alloy_sym(yytext(), DashSym.NO          );
          }
        case 140: break;
        case 25: 
          { return alloy_id  (yytext());
          }
        case 141: break;
        case 90: 
          { return alloy_sym(yytext(), DashSym.EVENT       );
          }
        case 142: break;
        case 40: 
          { return alloy_sym(yytext(), DashSym.AS          );
          }
        case 143: break;
        case 69: 
          { return alloy_sym(yytext(), DashSym.THIS        );
          }
        case 144: break;
        case 95: 
          { return alloy_sym(yytext(), DashSym.STRING      );
          }
        case 145: break;
        case 50: 
          { return alloy_sym(yytext(), DashSym.BUT         );
          }
        case 146: break;
        case 72: 
          { return alloy_sym(yytext(), DashSym.DISJ        );
          }
        case 147: break;
        case 45: 
          { return alloy_string(yytext());
          }
        case 148: break;
        case 39: 
          { return alloy_sym(yytext(), DashSym.OR          );
          }
        case 149: break;
        case 101: 
          { return alloy_sym(yytext(), DashSym.CONDITION   );
          }
        case 150: break;
        case 57: 
          { return alloy_sym(yytext(), DashSym.ENV         );
          }
        case 151: break;
        case 13: 
          { return alloy_sym(yytext(), DashSym.SLASH       );
          }
        case 152: break;
        case 99: 
          { return alloy_sym(yytext(), DashSym.PRIVATE     );
          }
        case 153: break;
        case 31: 
          { return alloy_sym(yytext(), DashSym.ARROW       );
          }
        case 154: break;
        case 33: 
          { return alloy_sym(yytext(), DashSym.GTE         );
          }
        case 155: break;
        case 86: 
          { return alloy_sym(yytext(), DashSym.STATE       );
          }
        case 156: break;
        case 32: 
          { return alloy_sym(yytext(), DashSym.SHA         );
          }
        case 157: break;
        case 87: 
          { return alloy_sym(yytext(), DashSym.TRANS       );
          }
        case 158: break;
        case 73: 
          { return alloy_sym(yytext(), DashSym.ELSE        );
          }
        case 159: break;
        case 12: 
          { return alloy_sym(yytext(), DashSym.DOT         );
          }
        case 160: break;
        case 47: 
          { return alloy_sym(yytext(), DashSym.SHR         );
          }
        case 161: break;
        case 8: 
          { return alloy_sym(yytext(), DashSym.PLUS        );
          }
        case 162: break;
        case 60: 
          { return alloy_sym(yytext(), DashSym.ONE         );
          }
        case 163: break;
        case 37: 
          { return alloy_sym(yytext(), DashSym.LTE         );
          }
        case 164: break;
        case 84: 
          { return alloy_sym(yytext(), DashSym.GOTO        );
          }
        case 165: break;
        case 79: 
          { return alloy_sym(yytext(), DashSym.OPEN        );
          }
        case 166: break;
        case 67: 
          { return alloy_sym(yytext(), DashSym.SEND        );
          }
        case 167: break;
        case 20: 
          { return alloy_sym(yytext(), DashSym.CARET       );
          }
        case 168: break;
        case 66: 
          { return alloy_hexnum (yytext());
          }
        case 169: break;
        case 48: 
          { return alloy_sym(yytext(), DashSym.IFF         );
          }
        case 170: break;
        case 16: 
          { return alloy_sym(yytext(), DashSym.EQUALS      );
          }
        case 171: break;
        case 3: 
          { return alloy_sym(yytext(), DashSym.HASH        );
          }
        case 172: break;
        case 22: 
          { return alloy_sym(yytext(), DashSym.BAR         );
          }
        case 173: break;
        case 93: 
          { return alloy_sym(yytext(), DashSym.EXPECT      );
          }
        case 174: break;
        case 27: 
          { throw new ErrorSyntax(alloy_here(yytext()),"String literal is missing its closing \" character");
          }
        case 175: break;
        case 103: 
          { return alloy_sym(yytext(), DashSym.INVARIANT   );
          }
        case 176: break;
        case 78: 
          { return alloy_sym(yytext(), DashSym.IDEN        );
          }
        case 177: break;
        case 28: 
          { return alloy_num (yytext());
          }
        case 178: break;
        case 17: 
          { return alloy_sym(yytext(), DashSym.AT          );
          }
        case 179: break;
        case 11: 
          { return alloy_sym(yytext(), DashSym.GT          );
          }
        case 180: break;
        case 94: 
          { return alloy_sym(yytext(), DashSym.MODULE      );
          }
        case 181: break;
        case 92: 
          { return alloy_sym(yytext(), DashSym.ACTION      );
          }
        case 182: break;
        case 14: 
          { return alloy_sym(yytext(), DashSym.COLON       );
          }
        case 183: break;
        case 53: 
          { return alloy_sym(yytext(), DashSym.SUM         );
          }
        case 184: break;
        case 80: 
          { return alloy_sym(yytext(), DashSym.PART        );
          }
        case 185: break;
        case 51: 
          { return alloy_sym(yytext(), DashSym.SET         );
          }
        case 186: break;
        case 2: 
          { return alloy_sym(yytext(), DashSym.NOT         );
          }
        case 187: break;
        case 98: 
          { return alloy_sym(yytext(), DashSym.EXTENDS     );
          }
        case 188: break;
        case 62: 
          { return alloy_sym(yytext(), DashSym.FOR         );
          }
        case 189: break;
        case 43: 
          { return alloy_sym(yytext(), DashSym.IN          );
          }
        case 190: break;
        case 15: 
          { return alloy_sym(yytext(), DashSym.LT          );
          }
        case 191: break;
        case 44: 
          { return alloy_sym(yytext(), DashSym.ON          );
          }
        case 192: break;
        case 88: 
          { return alloy_sym(yytext(), DashSym.CHECK       );
          }
        case 193: break;
        case 29: 
          { return alloy_sym(yytext(), DashSym.AND         );
          }
        case 194: break;
        case 34: 
          { return alloy_sym(yytext(), DashSym.RANGE       );
          }
        case 195: break;
        case 68: 
          { return alloy_sym(yytext(), DashSym.SOME        );
          }
        case 196: break;
        case 76: 
          { return alloy_sym(yytext(), DashSym.UNIV        );
          }
        case 197: break;
        case 82: 
          { return alloy_sym(yytext(), DashSym.FACT        );
          }
        case 198: break;
        case 5: 
          { return alloy_sym(yytext(), DashSym.LPAREN      );
          }
        case 199: break;
        case 6: 
          { return alloy_sym(yytext(), DashSym.RPAREN      );
          }
        case 200: break;
        case 85: 
          { return alloy_sym(yytext(), DashSym.WHEN        );
          }
        case 201: break;
        case 19: 
          { return alloy_sym(yytext(), DashSym.RBRACKET    );
          }
        case 202: break;
        case 49: 
          { return alloy_sym(yytext(), DashSym.ALL         );
          }
        case 203: break;
        case 91: 
          { return alloy_sym(yytext(), DashSym.ASSERT      );
          }
        case 204: break;
        case 64: 
          { throw new ErrorSyntax(alloy_here(yytext()),"String literal cannot be followed by a legal identifier character.");
          }
        case 205: break;
        case 10: 
          { return alloy_sym(yytext(), DashSym.MINUS       );
          }
        case 206: break;
        case 26: 
          { 
          }
        case 207: break;
        case 46: 
          { throw new ErrorSyntax(alloy_here(yytext()),"Name cannot start with a number.");
          }
        case 208: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {   return new Symbol(DashSym.EOF, alloy_here(" "), alloy_here(" "));
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
