/* The following code was generated by JFlex 1.4.1 on 2/21/21 3:30 PM */

// Alloy Analyzer 4 -- Copyright (c) 2006-2008, Felix Chang
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files
// (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify,
// merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
// OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
// LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
// OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

package edu.mit.csail.sdg.parser;

import edu.mit.csail.sdg.alloy4.Err;
import edu.mit.csail.sdg.alloy4.ErrorSyntax;
import edu.mit.csail.sdg.alloy4.Pos;
import edu.mit.csail.sdg.alloy4.Version;
import edu.mit.csail.sdg.ast.ExprConstant;
import edu.mit.csail.sdg.ast.ExprVar;
import java.util.List;
import java_cup.runtime.*;

/** Autogenerated by JFlex 1.4.1 */

// @modified [electrum] added temporal keywords and operators (single quotes also
//           interpreted as primes); forbade primes in identifiers


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 2/21/21 3:30 PM from the specification file
 * <tt>src/main/java/edu/mit/csail/sdg/parser/Alloy.lex</tt>
 */
public final class CompLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\77\1\101\1\67\1\0\1\101\1\100\16\77\4\0\1\101\1\1"+
    "\1\65\1\2\1\70\1\0\1\3\1\64\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\13\1\14\1\71\1\74\10\75\1\15\1\63\1\16"+
    "\1\17\1\12\1\0\1\20\6\73\2\70\1\56\11\70\1\61\7\70"+
    "\1\21\1\66\1\22\1\23\1\72\1\0\1\30\1\31\1\35\1\40"+
    "\1\41\1\55\1\60\1\43\1\45\1\46\1\44\1\36\1\50\1\37"+
    "\1\47\1\54\1\57\1\34\1\32\1\33\1\42\1\53\1\62\1\51"+
    "\1\52\1\70\1\24\1\25\1\26\1\27\41\77\2\0\4\76\4\0"+
    "\1\76\2\0\1\77\7\0\1\76\4\0\1\76\5\0\27\76\1\0"+
    "\37\76\1\0\u01ca\76\4\0\14\76\16\0\5\76\7\0\1\76\1\0"+
    "\1\76\21\0\160\77\5\76\1\0\2\76\2\0\4\76\10\0\1\76"+
    "\1\0\3\76\1\0\1\76\1\0\24\76\1\0\123\76\1\0\213\76"+
    "\1\0\5\77\2\0\236\76\11\0\46\76\2\0\1\76\7\0\47\76"+
    "\7\0\1\76\1\0\55\77\1\0\1\77\1\0\2\77\1\0\2\77"+
    "\1\0\1\77\10\0\33\76\5\0\3\76\15\0\5\77\6\0\1\76"+
    "\4\0\13\77\5\0\53\76\37\77\4\0\2\76\1\77\143\76\1\0"+
    "\1\76\10\77\1\0\6\77\2\76\2\77\1\0\4\77\2\76\12\77"+
    "\3\76\2\0\1\76\17\0\1\77\1\76\1\77\36\76\33\77\2\0"+
    "\131\76\13\77\1\76\16\0\12\77\41\76\11\77\2\76\4\0\1\76"+
    "\5\0\26\76\4\77\1\76\11\77\1\76\3\77\1\76\5\77\22\0"+
    "\31\76\3\77\104\0\1\76\1\0\13\76\67\0\33\77\1\0\4\77"+
    "\66\76\3\77\1\76\22\77\1\76\7\77\12\76\2\77\2\0\12\77"+
    "\1\0\7\76\1\0\7\76\1\0\3\77\1\0\10\76\2\0\2\76"+
    "\2\0\26\76\1\0\7\76\1\0\1\76\3\0\4\76\2\0\1\77"+
    "\1\76\7\77\2\0\2\77\2\0\3\77\1\76\10\0\1\77\4\0"+
    "\2\76\1\0\3\76\2\77\2\0\12\77\4\76\7\0\1\76\5\0"+
    "\3\77\1\0\6\76\4\0\2\76\2\0\26\76\1\0\7\76\1\0"+
    "\2\76\1\0\2\76\1\0\2\76\2\0\1\77\1\0\5\77\4\0"+
    "\2\77\2\0\3\77\3\0\1\77\7\0\4\76\1\0\1\76\7\0"+
    "\14\77\3\76\1\77\13\0\3\77\1\0\11\76\1\0\3\76\1\0"+
    "\26\76\1\0\7\76\1\0\2\76\1\0\5\76\2\0\1\77\1\76"+
    "\10\77\1\0\3\77\1\0\3\77\2\0\1\76\17\0\2\76\2\77"+
    "\2\0\12\77\1\0\1\76\17\0\3\77\1\0\10\76\2\0\2\76"+
    "\2\0\26\76\1\0\7\76\1\0\2\76\1\0\5\76\2\0\1\77"+
    "\1\76\7\77\2\0\2\77\2\0\3\77\10\0\2\77\4\0\2\76"+
    "\1\0\3\76\2\77\2\0\12\77\1\0\1\76\20\0\1\77\1\76"+
    "\1\0\6\76\3\0\3\76\1\0\4\76\3\0\2\76\1\0\1\76"+
    "\1\0\2\76\3\0\2\76\3\0\3\76\3\0\14\76\4\0\5\77"+
    "\3\0\3\77\1\0\4\77\2\0\1\76\6\0\1\77\16\0\12\77"+
    "\11\0\1\76\7\0\3\77\1\0\10\76\1\0\3\76\1\0\27\76"+
    "\1\0\12\76\1\0\5\76\3\0\1\76\7\77\1\0\3\77\1\0"+
    "\4\77\7\0\2\77\1\0\2\76\6\0\2\76\2\77\2\0\12\77"+
    "\22\0\2\77\1\0\10\76\1\0\3\76\1\0\27\76\1\0\12\76"+
    "\1\0\5\76\2\0\1\77\1\76\7\77\1\0\3\77\1\0\4\77"+
    "\7\0\2\77\7\0\1\76\1\0\2\76\2\77\2\0\12\77\1\0"+
    "\2\76\17\0\2\77\1\0\10\76\1\0\3\76\1\0\51\76\2\0"+
    "\1\76\7\77\1\0\3\77\1\0\4\77\1\76\10\0\1\77\10\0"+
    "\2\76\2\77\2\0\12\77\12\0\6\76\2\0\2\77\1\0\22\76"+
    "\3\0\30\76\1\0\11\76\1\0\1\76\2\0\7\76\3\0\1\77"+
    "\4\0\6\77\1\0\1\77\1\0\10\77\22\0\2\77\15\0\60\76"+
    "\1\77\2\76\7\77\4\0\10\76\10\77\1\0\12\77\47\0\2\76"+
    "\1\0\1\76\2\0\2\76\1\0\1\76\2\0\1\76\6\0\4\76"+
    "\1\0\7\76\1\0\3\76\1\0\1\76\1\0\1\76\2\0\2\76"+
    "\1\0\4\76\1\77\2\76\6\77\1\0\2\77\1\76\2\0\5\76"+
    "\1\0\1\76\1\0\6\77\2\0\12\77\2\0\4\76\40\0\1\76"+
    "\27\0\2\77\6\0\12\77\13\0\1\77\1\0\1\77\1\0\1\77"+
    "\4\0\2\77\10\76\1\0\44\76\4\0\24\77\1\0\2\77\5\76"+
    "\13\77\1\0\44\77\11\0\1\77\71\0\53\76\24\77\1\76\12\77"+
    "\6\0\6\76\4\77\4\76\3\77\1\76\3\77\2\76\7\77\3\76"+
    "\4\77\15\76\14\77\1\76\17\77\2\0\46\76\1\0\1\76\5\0"+
    "\1\76\2\0\53\76\1\0\u014d\76\1\0\4\76\2\0\7\76\1\0"+
    "\1\76\1\0\4\76\2\0\51\76\1\0\4\76\2\0\41\76\1\0"+
    "\4\76\2\0\7\76\1\0\1\76\1\0\4\76\2\0\17\76\1\0"+
    "\71\76\1\0\4\76\2\0\103\76\2\0\3\77\40\0\20\76\20\0"+
    "\125\76\14\0\u026c\76\2\0\21\76\1\0\32\76\5\0\113\76\3\0"+
    "\3\76\17\0\15\76\1\0\4\76\3\77\13\0\22\76\3\77\13\0"+
    "\22\76\2\77\14\0\15\76\1\0\3\76\1\0\2\77\14\0\64\76"+
    "\40\77\3\0\1\76\3\0\2\76\1\77\2\0\12\77\41\0\3\77"+
    "\2\0\12\77\6\0\130\76\10\0\51\76\1\77\1\76\5\0\106\76"+
    "\12\0\35\76\3\0\14\77\4\0\14\77\12\0\12\77\36\76\2\0"+
    "\5\76\13\0\54\76\4\0\21\77\7\76\2\77\6\0\12\77\46\0"+
    "\27\76\5\77\4\0\65\76\12\77\1\0\35\77\2\0\13\77\6\0"+
    "\12\77\15\0\1\76\130\0\5\77\57\76\21\77\7\76\4\0\12\77"+
    "\21\0\11\77\14\0\3\77\36\76\15\77\2\76\12\77\54\76\16\77"+
    "\14\0\44\76\24\77\10\0\12\77\3\0\3\76\12\77\44\76\122\0"+
    "\3\77\1\0\25\77\4\76\1\77\4\76\3\77\2\76\11\0\300\76"+
    "\47\77\25\0\4\77\u0116\76\2\0\6\76\2\0\46\76\2\0\6\76"+
    "\2\0\10\76\1\0\1\76\1\0\1\76\1\0\1\76\1\0\37\76"+
    "\2\0\65\76\1\0\7\76\1\0\1\76\3\0\3\76\1\0\7\76"+
    "\3\0\4\76\2\0\6\76\4\0\15\76\5\0\3\76\1\0\7\76"+
    "\16\0\5\77\10\0\1\64\1\64\20\0\5\77\20\0\2\76\23\0"+
    "\1\76\13\0\5\77\5\0\6\77\1\0\1\76\15\0\1\76\20\0"+
    "\15\76\3\0\33\76\25\0\15\77\4\0\1\77\3\0\14\77\21\0"+
    "\1\76\4\0\1\76\2\0\12\76\1\0\1\76\3\0\5\76\6\0"+
    "\1\76\1\0\1\76\1\0\1\76\1\0\4\76\1\0\13\76\2\0"+
    "\4\76\5\0\5\76\4\0\1\76\21\0\51\76\u0a77\0\57\76\1\0"+
    "\57\76\1\0\205\76\6\0\4\76\3\77\2\76\14\0\46\76\1\0"+
    "\1\76\5\0\1\76\2\0\70\76\7\0\1\76\17\0\1\77\27\76"+
    "\11\0\7\76\1\0\7\76\1\0\7\76\1\0\7\76\1\0\7\76"+
    "\1\0\7\76\1\0\7\76\1\0\7\76\1\0\40\77\57\0\1\76"+
    "\u01d5\0\3\76\31\0\11\76\6\77\1\0\5\76\2\0\5\76\4\0"+
    "\126\76\2\0\2\77\2\0\3\76\1\0\132\76\1\0\4\76\5\0"+
    "\51\76\3\0\136\76\21\0\33\76\65\0\20\76\u0200\0\u19b6\76\112\0"+
    "\u51cd\76\63\0\u048d\76\103\0\56\76\2\0\u010d\76\3\0\20\76\12\77"+
    "\2\76\24\0\57\76\1\77\4\0\12\77\1\0\31\76\7\0\1\77"+
    "\120\76\2\77\45\0\11\76\2\0\147\76\2\0\4\76\1\0\4\76"+
    "\14\0\13\76\115\0\12\76\1\77\3\76\1\77\4\76\1\77\27\76"+
    "\5\77\20\0\1\76\7\0\64\76\14\0\2\77\62\76\21\77\13\0"+
    "\12\77\6\0\22\77\6\76\3\0\1\76\4\0\12\77\34\76\10\77"+
    "\2\0\27\76\15\77\14\0\35\76\3\0\4\77\57\76\16\77\16\0"+
    "\1\76\12\77\46\0\51\76\16\77\11\0\3\76\1\77\10\76\2\77"+
    "\2\0\12\77\6\0\27\76\3\0\1\76\1\77\4\0\60\76\1\77"+
    "\1\76\3\77\2\76\2\77\5\76\2\77\1\76\1\77\1\76\30\0"+
    "\3\76\2\0\13\76\5\77\2\0\3\76\2\77\12\0\6\76\2\0"+
    "\6\76\2\0\6\76\11\0\7\76\1\0\7\76\221\0\43\76\10\77"+
    "\1\0\2\77\2\0\12\77\6\0\u2ba4\76\14\0\27\76\4\0\61\76"+
    "\u2104\0\u016e\76\2\0\152\76\46\0\7\76\14\0\5\76\5\0\1\76"+
    "\1\77\12\76\1\0\15\76\1\0\5\76\1\0\1\76\1\0\2\76"+
    "\1\0\2\76\1\0\154\76\41\0\u016b\76\22\0\100\76\2\0\66\76"+
    "\50\0\15\76\3\0\20\77\20\0\7\77\14\0\2\76\30\0\3\76"+
    "\31\0\1\76\6\0\5\76\1\0\207\76\2\0\1\77\4\0\1\76"+
    "\13\0\12\77\7\0\32\76\4\0\1\76\1\0\32\76\13\0\131\76"+
    "\3\0\6\76\2\0\6\76\2\0\6\76\2\0\3\76\3\0\2\76"+
    "\3\0\2\76\22\0\3\77\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\25\31\1\32\1\33\1\34\1\35\2\36\1\37"+
    "\1\40\1\35\1\41\1\42\1\43\1\0\1\44\1\45"+
    "\1\46\1\47\1\50\1\47\1\51\1\31\1\52\21\31"+
    "\1\53\7\31\1\54\3\31\1\51\13\31\1\55\1\0"+
    "\3\56\1\57\2\0\1\60\2\31\1\61\1\31\1\37"+
    "\2\31\1\62\1\31\1\63\1\64\1\65\1\31\1\66"+
    "\4\31\1\67\1\31\1\70\1\31\1\2\6\31\1\71"+
    "\5\31\1\72\2\31\1\60\1\31\1\73\2\31\1\74"+
    "\4\31\1\75\1\76\1\77\1\31\1\100\1\101\1\56"+
    "\1\102\1\0\1\35\7\31\1\103\1\31\1\104\2\31"+
    "\1\105\1\106\1\107\1\110\1\111\6\31\1\112\1\31"+
    "\1\113\1\31\1\114\1\115\1\31\1\116\1\117\1\31"+
    "\1\120\4\31\1\121\1\31\1\122\1\123\2\31\1\124"+
    "\6\31\1\125\7\31\1\126\1\127\1\130\6\31\1\131"+
    "\3\31\1\132\2\31\1\133\4\31\1\134\1\135\3\31"+
    "\1\50\1\31\1\136\1\137\1\31\1\140\1\107\4\31"+
    "\1\141\3\31\1\116\1\71\1\142\2\31\1\143";

  private static int [] zzUnpackAction() {
    int [] result = new int[282];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\102\0\102\0\204\0\102\0\102\0\102"+
    "\0\306\0\102\0\u0108\0\u014a\0\102\0\u018c\0\u01ce\0\u0210"+
    "\0\u0252\0\102\0\102\0\102\0\102\0\102\0\u0294\0\102"+
    "\0\102\0\u02d6\0\u0318\0\u035a\0\u039c\0\u03de\0\u0420\0\u0462"+
    "\0\u04a4\0\u04e6\0\u0528\0\u056a\0\u05ac\0\u05ee\0\u0630\0\u0672"+
    "\0\u06b4\0\u06f6\0\u0738\0\u077a\0\u07bc\0\u07fe\0\102\0\102"+
    "\0\u0840\0\102\0\u0882\0\u08c4\0\102\0\102\0\u0906\0\102"+
    "\0\u0948\0\102\0\u098a\0\102\0\102\0\102\0\u09cc\0\102"+
    "\0\102\0\102\0\u0a0e\0\u0a50\0\u0a92\0\u0ad4\0\u0b16\0\u0b58"+
    "\0\u0b9a\0\u0bdc\0\u0c1e\0\u0c60\0\u0ca2\0\u0ce4\0\u0d26\0\u0d68"+
    "\0\u0daa\0\u0dec\0\u0e2e\0\u0e70\0\u0eb2\0\u0ef4\0\u0f36\0\u0f78"+
    "\0\u0fba\0\u0ffc\0\u103e\0\u1080\0\u10c2\0\u1104\0\u1146\0\u1188"+
    "\0\u11ca\0\u05ee\0\u120c\0\u124e\0\u1290\0\u12d2\0\u1314\0\u1356"+
    "\0\u1398\0\u13da\0\u141c\0\u145e\0\u14a0\0\u14e2\0\u1524\0\u1566"+
    "\0\u15a8\0\u15ea\0\102\0\u162c\0\u166e\0\102\0\u16b0\0\u16f2"+
    "\0\u05ee\0\u1734\0\u05ee\0\u1776\0\u17b8\0\u05ee\0\u17fa\0\u05ee"+
    "\0\u05ee\0\u05ee\0\u183c\0\u05ee\0\u187e\0\u18c0\0\u1902\0\u1944"+
    "\0\u05ee\0\u1986\0\u05ee\0\u19c8\0\u05ee\0\u1a0a\0\u1a4c\0\u1a8e"+
    "\0\u1ad0\0\u1b12\0\u1b54\0\u1b96\0\u1bd8\0\u1c1a\0\u1c5c\0\u1c9e"+
    "\0\u1ce0\0\u05ee\0\u1d22\0\u1d64\0\u05ee\0\u1da6\0\u05ee\0\u1de8"+
    "\0\u1e2a\0\u05ee\0\u1e6c\0\u1eae\0\u1ef0\0\u1f32\0\u05ee\0\u05ee"+
    "\0\u05ee\0\u1f74\0\u14e2\0\u15a8\0\u1fb6\0\u15ea\0\u1ff8\0\u162c"+
    "\0\u203a\0\u207c\0\u20be\0\u2100\0\u2142\0\u2184\0\u21c6\0\u05ee"+
    "\0\u2208\0\u05ee\0\u224a\0\u228c\0\u05ee\0\u05ee\0\u22ce\0\u05ee"+
    "\0\u05ee\0\u2310\0\u2352\0\u2394\0\u23d6\0\u2418\0\u245a\0\u05ee"+
    "\0\u249c\0\u05ee\0\u24de\0\u05ee\0\u05ee\0\u2520\0\u2562\0\u05ee"+
    "\0\u25a4\0\u05ee\0\u25e6\0\u2628\0\u266a\0\u26ac\0\u05ee\0\u26ee"+
    "\0\u05ee\0\u05ee\0\u2730\0\u2772\0\u05ee\0\u27b4\0\u27f6\0\u2838"+
    "\0\u287a\0\u28bc\0\u28fe\0\u05ee\0\u2940\0\u2982\0\u29c4\0\u2a06"+
    "\0\u2a48\0\u2a8a\0\u2acc\0\u05ee\0\u05ee\0\u05ee\0\u2b0e\0\u2b50"+
    "\0\u2b92\0\u2bd4\0\u2c16\0\u2c58\0\u05ee\0\u2c9a\0\u2cdc\0\u2d1e"+
    "\0\u05ee\0\u2d60\0\u2da2\0\u05ee\0\u2de4\0\u2e26\0\u2e68\0\u2eaa"+
    "\0\u05ee\0\u05ee\0\u2eec\0\u2f2e\0\u2f70\0\u05ee\0\u2fb2\0\u05ee"+
    "\0\u05ee\0\u2ff4\0\u05ee\0\u05ee\0\u3036\0\u3078\0\u30ba\0\u30fc"+
    "\0\u05ee\0\u313e\0\u3180\0\u31c2\0\u05ee\0\u05ee\0\u05ee\0\u3204"+
    "\0\u3246\0\u05ee";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[282];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\46\1\50"+
    "\1\51\2\46\1\52\1\53\1\54\1\55\2\46\1\56"+
    "\1\46\1\57\1\60\1\61\1\2\1\62\1\46\1\63"+
    "\2\46\2\64\1\46\1\2\2\62\105\0\1\65\105\0"+
    "\1\66\103\0\1\67\1\70\101\0\1\71\4\0\1\72"+
    "\70\0\1\73\5\0\1\67\77\0\1\74\2\0\1\15"+
    "\101\0\1\75\1\76\1\77\74\0\1\100\3\0\1\101"+
    "\110\0\1\102\104\0\1\46\1\103\1\104\3\46\1\105"+
    "\1\106\15\46\1\107\5\46\2\0\1\46\2\0\10\46"+
    "\32\0\11\46\1\110\1\111\20\46\2\0\1\46\2\0"+
    "\10\46\32\0\3\46\1\112\5\46\1\113\1\114\2\46"+
    "\1\115\1\46\1\116\13\46\2\0\1\46\2\0\10\46"+
    "\32\0\4\46\1\117\6\46\1\120\17\46\2\0\1\46"+
    "\2\0\10\46\32\0\11\46\1\121\1\122\20\46\2\0"+
    "\1\46\2\0\10\46\32\0\13\46\1\123\17\46\2\0"+
    "\1\46\2\0\10\46\32\0\11\46\1\124\5\46\1\125"+
    "\13\46\2\0\1\46\2\0\10\46\32\0\17\46\1\126"+
    "\13\46\2\0\1\46\2\0\10\46\32\0\15\46\1\127"+
    "\15\46\2\0\1\46\2\0\10\46\32\0\6\46\1\130"+
    "\1\131\11\46\1\132\1\46\1\133\7\46\2\0\1\46"+
    "\2\0\10\46\32\0\7\46\1\134\23\46\2\0\1\46"+
    "\2\0\10\46\32\0\15\46\1\135\15\46\2\0\1\46"+
    "\2\0\10\46\32\0\33\46\2\0\1\46\2\0\10\46"+
    "\32\0\7\46\1\136\1\137\7\46\1\140\4\46\1\141"+
    "\5\46\2\0\1\46\2\0\10\46\32\0\4\46\1\142"+
    "\2\46\1\143\14\46\1\144\6\46\2\0\1\46\2\0"+
    "\10\46\32\0\17\46\1\145\13\46\2\0\1\46\2\0"+
    "\10\46\32\0\1\146\32\46\2\0\1\46\2\0\10\46"+
    "\32\0\1\147\3\46\1\150\26\46\2\0\1\46\2\0"+
    "\10\46\32\0\1\151\11\46\1\152\4\46\1\153\13\46"+
    "\2\0\1\46\2\0\10\46\32\0\7\46\1\154\23\46"+
    "\2\0\1\46\2\0\10\46\32\0\3\46\1\155\27\46"+
    "\2\0\1\46\2\0\10\46\2\0\65\61\1\156\1\157"+
    "\13\61\30\0\1\160\1\161\17\160\1\162\11\160\2\0"+
    "\1\160\2\0\1\160\1\64\2\160\2\64\34\0\33\160"+
    "\2\0\1\160\2\0\1\160\1\64\2\160\2\64\4\0"+
    "\67\67\1\62\10\67\1\62\1\67\12\0\1\163\67\0"+
    "\6\164\1\165\73\164\12\0\1\166\117\0\2\46\1\167"+
    "\30\46\2\0\1\46\2\0\10\46\32\0\2\46\1\170"+
    "\30\46\2\0\1\46\2\0\10\46\32\0\6\46\1\171"+
    "\23\46\1\172\2\0\1\46\2\0\10\46\32\0\10\46"+
    "\1\173\22\46\2\0\1\46\2\0\10\46\32\0\3\46"+
    "\1\174\27\46\2\0\1\46\2\0\10\46\32\0\25\46"+
    "\1\175\5\46\2\0\1\46\2\0\10\46\32\0\3\46"+
    "\1\176\27\46\2\0\1\46\2\0\10\46\32\0\11\46"+
    "\1\177\21\46\2\0\1\46\2\0\10\46\32\0\3\46"+
    "\1\200\23\46\1\201\3\46\2\0\1\46\2\0\10\46"+
    "\32\0\20\46\1\202\12\46\2\0\1\46\2\0\10\46"+
    "\32\0\7\46\1\203\20\46\1\204\2\46\2\0\1\46"+
    "\2\0\10\46\32\0\20\46\1\205\12\46\2\0\1\46"+
    "\2\0\10\46\32\0\15\46\1\206\15\46\2\0\1\46"+
    "\2\0\10\46\32\0\15\46\1\207\15\46\2\0\1\46"+
    "\2\0\10\46\32\0\6\46\1\210\24\46\2\0\1\46"+
    "\2\0\10\46\32\0\7\46\1\211\23\46\2\0\1\46"+
    "\2\0\10\46\32\0\11\46\1\212\21\46\2\0\1\46"+
    "\2\0\10\46\32\0\3\46\1\213\27\46\2\0\1\46"+
    "\2\0\10\46\32\0\7\46\1\214\23\46\2\0\1\46"+
    "\2\0\10\46\32\0\3\46\1\215\3\46\1\216\23\46"+
    "\2\0\1\46\2\0\10\46\32\0\2\46\1\217\30\46"+
    "\2\0\1\46\2\0\10\46\32\0\2\46\1\220\30\46"+
    "\2\0\1\46\2\0\10\46\32\0\12\46\1\221\20\46"+
    "\2\0\1\46\2\0\10\46\32\0\1\222\2\46\1\223"+
    "\7\46\1\224\10\46\1\225\6\46\2\0\1\46\2\0"+
    "\10\46\32\0\11\46\1\226\21\46\2\0\1\46\2\0"+
    "\10\46\32\0\3\46\1\227\11\46\1\230\15\46\2\0"+
    "\1\46\2\0\10\46\32\0\2\46\1\231\30\46\2\0"+
    "\1\46\2\0\10\46\32\0\3\46\1\232\27\46\2\0"+
    "\1\46\2\0\10\46\32\0\11\46\1\233\21\46\2\0"+
    "\1\46\2\0\10\46\32\0\24\46\1\234\6\46\2\0"+
    "\1\46\2\0\10\46\32\0\25\46\1\235\5\46\2\0"+
    "\1\46\2\0\10\46\32\0\5\46\1\236\3\46\1\237"+
    "\21\46\2\0\1\46\2\0\10\46\32\0\11\46\1\240"+
    "\21\46\2\0\1\46\2\0\10\46\32\0\10\46\1\241"+
    "\22\46\2\0\1\46\2\0\10\46\32\0\4\46\1\242"+
    "\26\46\2\0\1\46\2\0\10\46\32\0\4\46\1\243"+
    "\26\46\2\0\1\46\2\0\10\46\32\0\11\46\1\244"+
    "\3\46\1\245\15\46\2\0\1\46\2\0\10\46\32\0"+
    "\5\46\1\246\25\46\2\0\1\46\2\0\10\46\32\0"+
    "\7\46\1\247\23\46\2\0\1\46\2\0\10\46\32\0"+
    "\4\46\1\250\26\46\2\0\1\46\2\0\10\46\32\0"+
    "\3\46\1\251\27\46\2\0\1\46\2\0\10\46\32\0"+
    "\4\46\1\252\26\46\2\0\1\46\2\0\10\46\32\0"+
    "\33\253\2\0\1\253\2\0\6\253\4\0\67\61\1\0"+
    "\12\61\30\0\33\160\2\0\1\160\2\0\6\160\34\0"+
    "\33\160\2\0\1\160\2\0\1\160\2\254\1\160\1\254"+
    "\1\160\34\0\2\255\3\160\1\255\2\160\2\255\13\160"+
    "\1\255\5\160\2\0\1\160\2\0\1\160\1\255\1\256"+
    "\3\255\4\0\6\164\1\257\101\164\1\257\5\164\1\260"+
    "\65\164\30\0\3\46\1\261\27\46\2\0\1\46\2\0"+
    "\10\46\32\0\11\46\1\262\21\46\2\0\1\46\2\0"+
    "\10\46\32\0\1\263\32\46\2\0\1\46\2\0\10\46"+
    "\32\0\11\46\1\264\21\46\2\0\1\46\2\0\10\46"+
    "\32\0\17\46\1\265\13\46\2\0\1\46\2\0\10\46"+
    "\32\0\24\46\1\266\6\46\2\0\1\46\2\0\10\46"+
    "\32\0\5\46\1\267\25\46\2\0\1\46\2\0\10\46"+
    "\32\0\11\46\1\270\21\46\2\0\1\46\2\0\10\46"+
    "\32\0\30\46\1\271\2\46\2\0\1\46\2\0\10\46"+
    "\32\0\2\46\1\272\30\46\2\0\1\46\2\0\10\46"+
    "\32\0\11\46\1\273\21\46\2\0\1\46\2\0\10\46"+
    "\32\0\5\46\1\274\25\46\2\0\1\46\2\0\10\46"+
    "\32\0\11\46\1\275\21\46\2\0\1\46\2\0\10\46"+
    "\32\0\11\46\1\276\21\46\2\0\1\46\2\0\10\46"+
    "\32\0\16\46\1\277\14\46\2\0\1\46\2\0\10\46"+
    "\32\0\11\46\1\300\21\46\2\0\1\46\2\0\10\46"+
    "\32\0\20\46\1\301\12\46\2\0\1\46\2\0\10\46"+
    "\32\0\5\46\1\302\25\46\2\0\1\46\2\0\10\46"+
    "\32\0\11\46\1\303\21\46\2\0\1\46\2\0\10\46"+
    "\32\0\1\304\32\46\2\0\1\46\2\0\10\46\32\0"+
    "\11\46\1\305\21\46\2\0\1\46\2\0\10\46\32\0"+
    "\7\46\1\306\23\46\2\0\1\46\2\0\10\46\32\0"+
    "\15\46\1\307\15\46\2\0\1\46\2\0\10\46\32\0"+
    "\23\46\1\310\7\46\2\0\1\46\2\0\10\46\32\0"+
    "\3\46\1\311\27\46\2\0\1\46\2\0\10\46\32\0"+
    "\7\46\1\312\23\46\2\0\1\46\2\0\10\46\32\0"+
    "\6\46\1\313\24\46\2\0\1\46\2\0\10\46\32\0"+
    "\11\46\1\314\21\46\2\0\1\46\2\0\10\46\32\0"+
    "\7\46\1\315\23\46\2\0\1\46\2\0\10\46\32\0"+
    "\12\46\1\316\20\46\2\0\1\46\2\0\10\46\32\0"+
    "\3\46\1\317\27\46\2\0\1\46\2\0\10\46\32\0"+
    "\10\46\1\320\22\46\2\0\1\46\2\0\10\46\32\0"+
    "\23\46\1\321\7\46\2\0\1\46\2\0\10\46\32\0"+
    "\3\46\1\322\27\46\2\0\1\46\2\0\10\46\32\0"+
    "\15\46\1\323\15\46\2\0\1\46\2\0\10\46\32\0"+
    "\2\256\3\160\1\256\2\160\2\256\13\160\1\256\5\160"+
    "\2\0\1\160\2\0\1\160\1\256\1\160\3\256\4\0"+
    "\6\164\1\257\5\164\1\62\65\164\30\0\4\46\1\324"+
    "\26\46\2\0\1\46\2\0\10\46\32\0\4\46\1\325"+
    "\26\46\2\0\1\46\2\0\10\46\32\0\22\46\1\326"+
    "\10\46\2\0\1\46\2\0\10\46\32\0\4\46\1\327"+
    "\26\46\2\0\1\46\2\0\10\46\32\0\4\46\1\330"+
    "\26\46\2\0\1\46\2\0\10\46\32\0\2\46\1\331"+
    "\30\46\2\0\1\46\2\0\10\46\32\0\11\46\1\332"+
    "\21\46\2\0\1\46\2\0\10\46\32\0\30\46\1\333"+
    "\2\46\2\0\1\46\2\0\10\46\32\0\1\334\32\46"+
    "\2\0\1\46\2\0\10\46\32\0\14\46\1\335\16\46"+
    "\2\0\1\46\2\0\10\46\32\0\17\46\1\336\13\46"+
    "\2\0\1\46\2\0\10\46\32\0\3\46\1\337\27\46"+
    "\2\0\1\46\2\0\10\46\32\0\7\46\1\340\23\46"+
    "\2\0\1\46\2\0\10\46\32\0\12\46\1\341\20\46"+
    "\2\0\1\46\2\0\10\46\32\0\5\46\1\342\25\46"+
    "\2\0\1\46\2\0\10\46\32\0\3\46\1\343\27\46"+
    "\2\0\1\46\2\0\10\46\32\0\6\46\1\344\24\46"+
    "\2\0\1\46\2\0\10\46\32\0\17\46\1\345\13\46"+
    "\2\0\1\46\2\0\10\46\32\0\15\46\1\346\15\46"+
    "\2\0\1\46\2\0\10\46\32\0\6\46\1\347\24\46"+
    "\2\0\1\46\2\0\10\46\32\0\15\46\1\350\15\46"+
    "\2\0\1\46\2\0\10\46\32\0\1\351\32\46\2\0"+
    "\1\46\2\0\10\46\32\0\7\46\1\352\23\46\2\0"+
    "\1\46\2\0\10\46\32\0\1\353\32\46\2\0\1\46"+
    "\2\0\10\46\32\0\3\46\1\354\27\46\2\0\1\46"+
    "\2\0\10\46\32\0\2\46\1\355\30\46\2\0\1\46"+
    "\2\0\10\46\32\0\11\46\1\356\21\46\2\0\1\46"+
    "\2\0\10\46\32\0\11\46\1\357\21\46\2\0\1\46"+
    "\2\0\10\46\32\0\2\46\1\360\30\46\2\0\1\46"+
    "\2\0\10\46\32\0\15\46\1\361\15\46\2\0\1\46"+
    "\2\0\10\46\32\0\6\46\1\362\24\46\2\0\1\46"+
    "\2\0\10\46\32\0\10\46\1\363\22\46\2\0\1\46"+
    "\2\0\10\46\32\0\2\46\1\364\30\46\2\0\1\46"+
    "\2\0\10\46\32\0\3\46\1\365\27\46\2\0\1\46"+
    "\2\0\10\46\32\0\12\46\1\366\20\46\2\0\1\46"+
    "\2\0\10\46\32\0\4\46\1\367\26\46\2\0\1\46"+
    "\2\0\10\46\32\0\11\46\1\370\21\46\2\0\1\46"+
    "\2\0\10\46\32\0\11\46\1\371\21\46\2\0\1\46"+
    "\2\0\10\46\32\0\3\46\1\372\27\46\2\0\1\46"+
    "\2\0\10\46\32\0\3\46\1\373\27\46\2\0\1\46"+
    "\2\0\10\46\32\0\30\46\1\374\2\46\2\0\1\46"+
    "\2\0\10\46\32\0\5\46\1\375\25\46\2\0\1\46"+
    "\2\0\10\46\32\0\4\46\1\376\26\46\2\0\1\46"+
    "\2\0\10\46\32\0\11\46\1\377\21\46\2\0\1\46"+
    "\2\0\10\46\32\0\7\46\1\u0100\23\46\2\0\1\46"+
    "\2\0\10\46\32\0\22\46\1\u0101\10\46\2\0\1\46"+
    "\2\0\10\46\32\0\2\46\1\u0102\30\46\2\0\1\46"+
    "\2\0\10\46\32\0\3\46\1\u0103\27\46\2\0\1\46"+
    "\2\0\10\46\32\0\1\u0104\32\46\2\0\1\46\2\0"+
    "\10\46\32\0\15\46\1\u0105\15\46\2\0\1\46\2\0"+
    "\10\46\32\0\2\46\1\u0106\30\46\2\0\1\46\2\0"+
    "\10\46\32\0\15\46\1\u0107\15\46\2\0\1\46\2\0"+
    "\10\46\32\0\11\46\1\u0108\21\46\2\0\1\46\2\0"+
    "\10\46\32\0\3\46\1\u0109\27\46\2\0\1\46\2\0"+
    "\10\46\32\0\11\46\1\u010a\21\46\2\0\1\46\2\0"+
    "\10\46\32\0\2\46\1\u010b\30\46\2\0\1\46\2\0"+
    "\10\46\32\0\3\46\1\u010c\27\46\2\0\1\46\2\0"+
    "\10\46\32\0\15\46\1\u010d\15\46\2\0\1\46\2\0"+
    "\10\46\32\0\6\46\1\u010e\24\46\2\0\1\46\2\0"+
    "\10\46\32\0\5\46\1\u010f\25\46\2\0\1\46\2\0"+
    "\10\46\32\0\17\46\1\u0110\13\46\2\0\1\46\2\0"+
    "\10\46\32\0\10\46\1\u0111\22\46\2\0\1\46\2\0"+
    "\10\46\32\0\23\46\1\u0112\7\46\2\0\1\46\2\0"+
    "\10\46\32\0\6\46\1\u0113\24\46\2\0\1\46\2\0"+
    "\10\46\32\0\1\u0114\32\46\2\0\1\46\2\0\10\46"+
    "\32\0\7\46\1\u0115\23\46\2\0\1\46\2\0\10\46"+
    "\32\0\11\46\1\u0116\21\46\2\0\1\46\2\0\10\46"+
    "\32\0\22\46\1\u0117\10\46\2\0\1\46\2\0\10\46"+
    "\32\0\6\46\1\u0118\24\46\2\0\1\46\2\0\10\46"+
    "\32\0\6\46\1\u0119\24\46\2\0\1\46\2\0\10\46"+
    "\32\0\22\46\1\u011a\10\46\2\0\1\46\2\0\10\46"+
    "\2\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12936];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\3\11\1\1\3\11\1\1\1\11\2\1\1\11"+
    "\4\1\5\11\1\1\2\11\25\1\2\11\1\1\1\11"+
    "\2\1\2\11\1\1\1\11\1\1\1\11\1\0\3\11"+
    "\1\1\3\11\54\1\1\0\3\1\1\11\2\0\1\11"+
    "\70\1\1\0\153\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[282];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
 public String alloy_filename="";
 public int alloy_lineoffset=0; // If not zero, it is added to the current LINE NUMBER
 public List<Object> alloy_seenDollar;
 public CompModule alloy_module;
 private final Pos alloy_here(String txt) {
    return new Pos(alloy_filename,yycolumn+1,yyline+1+alloy_lineoffset,yycolumn+txt.length(),yyline+1);
 }
 private final Symbol alloy_sym(String txt, int type) {
    Pos p = alloy_here(txt); return new Symbol(type, p, p);
 }
 private final Symbol alloy_string(String txt) throws Err {
    Pos p = alloy_here(txt);
    if (!Version.experimental) throw new ErrorSyntax(p, "String literal is not currently supported.");
    StringBuilder sb = new StringBuilder(txt.length());
    for(int i=0; i<txt.length(); i++) {
       char c = txt.charAt(i);
       if (c=='\r' || c=='\n') throw new ErrorSyntax(p, "String literal cannot span multiple lines; use \\n instead.");
       if (c=='\\') {
          i++;
          if (i>=txt.length()) throw new ErrorSyntax(p, "String literal cannot end with a single \\");
          c = txt.charAt(i);
          if (c=='n') c='\n'; else if (c!='\"' && c!='\\') throw new ErrorSyntax(p, "String literal currently only supports\nthree escape sequences: \\\\, \\n, and \\\"");
       }
       sb.append(c);
    }
    txt = sb.toString();
    if (txt.length()==2) throw new ErrorSyntax(p, "Empty string is not allowed; try rewriting your model to use an empty set instead.");
    return new Symbol(CompSym.STR, p, ExprConstant.Op.STRING.make(p, txt));
 }
 private final Symbol alloy_id(String txt) throws Err {
    Pos p=alloy_here(txt);
    if (alloy_seenDollar.size()==0 && txt.indexOf('$')>=0) alloy_seenDollar.add(null);
    return new Symbol(CompSym.ID, p, ExprVar.make(p,txt));
 }
 private final Symbol alloy_num(String txt) throws Err {
    Pos p=alloy_here(txt);
    int n=0;
    try {
        txt = txt.replaceAll("_","");
        n=Integer.parseInt(txt);
    } catch(NumberFormatException ex) {
       throw new ErrorSyntax(p, "The number "+txt+" " + ex);
    }
    return new Symbol(CompSym.NUMBER, p, ExprConstant.Op.NUMBER.make(p, n));
 }
 private final Symbol alloy_hexnum(String txt) throws Err {
    Pos p=alloy_here(txt);
    int n=0;
    try {
        txt = txt.substring(2).replaceAll("_","");
        n=Integer.parseInt(txt, 16);
    } catch(NumberFormatException ex) {
       throw new ErrorSyntax(p, "The hex number "+txt+" " + ex);
    }
    return new Symbol(CompSym.NUMBER, p, ExprConstant.Op.NUMBER.make(p, n));
 }
 private final Symbol alloy_binarynum(String txt) throws Err {
    Pos p=alloy_here(txt);
    int n=0;
    try {
        txt = txt.substring(2).replaceAll("_","");
        n=Integer.parseInt(txt, 2);
    } catch(NumberFormatException ex) {
       throw new ErrorSyntax(p, "The binary number "+txt+" " + ex);
    }
    return new Symbol(CompSym.NUMBER, p, ExprConstant.Op.NUMBER.make(p, n));
 }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public CompLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public CompLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2270) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 4: 
          { return alloy_sym(yytext(), CompSym.AMPERSAND   );
          }
        case 100: break;
        case 52: 
          { return alloy_sym(yytext(), CompSym.SEQ         );
          }
        case 101: break;
        case 65: 
          { return alloy_binarynum (yytext());
          }
        case 102: break;
        case 40: 
          { return alloy_sym(yytext(), CompSym.IMPLIES     );
          }
        case 103: break;
        case 23: 
          { return alloy_sym(yytext(), CompSym.RBRACE      );
          }
        case 104: break;
        case 99: 
          { return alloy_sym(yytext(), CompSym.HISTORICALLY);
          }
        case 105: break;
        case 97: 
          { return alloy_sym(yytext(), CompSym.TRIGGERED   );
          }
        case 106: break;
        case 60: 
          { return alloy_sym(yytext(), CompSym.VAR         );
          }
        case 107: break;
        case 92: 
          { return alloy_sym(yytext(), CompSym.EXACTLY     );
          }
        case 108: break;
        case 1: 
          { throw new ErrorSyntax(alloy_here(" "), "Syntax error at the "+yytext()+" character. HEX: \\u"+Integer.toString(yytext().charAt(0),16)+")");
          }
        case 109: break;
        case 55: 
          { return alloy_sym(yytext(), CompSym.RUN         );
          }
        case 110: break;
        case 38: 
          { return alloy_sym(yytext(), CompSym.SHL         );
          }
        case 111: break;
        case 37: 
          { return alloy_sym(yytext(), CompSym.DOMAIN      );
          }
        case 112: break;
        case 63: 
          { return alloy_sym(yytext(), CompSym.SIGINT      );
          }
        case 113: break;
        case 24: 
          { return alloy_sym(yytext(), CompSym.TILDE       );
          }
        case 114: break;
        case 96: 
          { return alloy_sym(yytext(), CompSym.RELEASES    );
          }
        case 115: break;
        case 82: 
          { return alloy_sym(yytext(), CompSym.TIME        );
          }
        case 116: break;
        case 21: 
          { return alloy_sym(yytext(), CompSym.LBRACE      );
          }
        case 117: break;
        case 7: 
          { return alloy_sym(yytext(), CompSym.STAR        );
          }
        case 118: break;
        case 32: 
          { return alloy_sym(yytext(), CompSym.PLUSPLUS    );
          }
        case 119: break;
        case 61: 
          { return alloy_sym(yytext(), CompSym.FUN         );
          }
        case 120: break;
        case 91: 
          { return alloy_sym(yytext(), CompSym.STRING      );
          }
        case 121: break;
        case 57: 
          { return alloy_sym(yytext(), CompSym.EXH         );
          }
        case 122: break;
        case 58: 
          { return alloy_sym(yytext(), CompSym.INT         );
          }
        case 123: break;
        case 54: 
          { return alloy_sym(yytext(), CompSym.SIG         );
          }
        case 124: break;
        case 79: 
          { return alloy_sym(yytext(), CompSym.PRED        );
          }
        case 125: break;
        case 25: 
          { return alloy_id  (yytext());
          }
        case 126: break;
        case 83: 
          { return alloy_sym(yytext(), CompSym.SINCE       );
          }
        case 127: break;
        case 69: 
          { return alloy_sym(yytext(), CompSym.LONE        );
          }
        case 128: break;
        case 43: 
          { return alloy_sym(yytext(), CompSym.NO          );
          }
        case 129: break;
        case 9: 
          { return alloy_sym(yytext(), CompSym.COMMA       );
          }
        case 130: break;
        case 42: 
          { return alloy_sym(yytext(), CompSym.AS          );
          }
        case 131: break;
        case 68: 
          { return alloy_sym(yytext(), CompSym.THIS        );
          }
        case 132: break;
        case 13: 
          { return alloy_sym(yytext(), CompSym.SLASH       );
          }
        case 133: break;
        case 81: 
          { return alloy_sym(yytext(), CompSym.AFTER       );
          }
        case 134: break;
        case 50: 
          { return alloy_sym(yytext(), CompSym.BUT         );
          }
        case 135: break;
        case 45: 
          { return alloy_string(yytext());
          }
        case 136: break;
        case 71: 
          { return alloy_sym(yytext(), CompSym.DISJ        );
          }
        case 137: break;
        case 34: 
          { return alloy_sym(yytext(), CompSym.SHA         );
          }
        case 138: break;
        case 27: 
          { return alloy_sym(yytext(), CompSym.PRIME       );
          }
        case 139: break;
        case 41: 
          { return alloy_sym(yytext(), CompSym.OR          );
          }
        case 140: break;
        case 47: 
          { return alloy_sym(yytext(), CompSym.SHR         );
          }
        case 141: break;
        case 94: 
          { return alloy_sym(yytext(), CompSym.PRIVATE     );
          }
        case 142: break;
        case 33: 
          { return alloy_sym(yytext(), CompSym.ARROW       );
          }
        case 143: break;
        case 35: 
          { return alloy_sym(yytext(), CompSym.GTE         );
          }
        case 144: break;
        case 20: 
          { return alloy_sym(yytext(), CompSym.CARET       );
          }
        case 145: break;
        case 48: 
          { return alloy_sym(yytext(), CompSym.IFF         );
          }
        case 146: break;
        case 26: 
          { return alloy_sym(yytext(), CompSym.TRCSEQ      );
          }
        case 147: break;
        case 72: 
          { return alloy_sym(yytext(), CompSym.ELSE        );
          }
        case 148: break;
        case 3: 
          { return alloy_sym(yytext(), CompSym.HASH        );
          }
        case 149: break;
        case 12: 
          { return alloy_sym(yytext(), CompSym.DOT         );
          }
        case 150: break;
        case 22: 
          { return alloy_sym(yytext(), CompSym.BAR         );
          }
        case 151: break;
        case 89: 
          { return alloy_sym(yytext(), CompSym.EXPECT      );
          }
        case 152: break;
        case 8: 
          { return alloy_sym(yytext(), CompSym.PLUS        );
          }
        case 153: break;
        case 85: 
          { return alloy_sym(yytext(), CompSym.UNTIL       );
          }
        case 154: break;
        case 39: 
          { return alloy_sym(yytext(), CompSym.LTE         );
          }
        case 155: break;
        case 59: 
          { return alloy_sym(yytext(), CompSym.ONE         );
          }
        case 156: break;
        case 77: 
          { return alloy_sym(yytext(), CompSym.OPEN        );
          }
        case 157: break;
        case 87: 
          { return alloy_sym(yytext(), CompSym.ALWAYS      );
          }
        case 158: break;
        case 66: 
          { return alloy_hexnum (yytext());
          }
        case 159: break;
        case 11: 
          { return alloy_sym(yytext(), CompSym.GT          );
          }
        case 160: break;
        case 90: 
          { return alloy_sym(yytext(), CompSym.MODULE      );
          }
        case 161: break;
        case 14: 
          { return alloy_sym(yytext(), CompSym.COLON       );
          }
        case 162: break;
        case 53: 
          { return alloy_sym(yytext(), CompSym.SUM         );
          }
        case 163: break;
        case 78: 
          { return alloy_sym(yytext(), CompSym.PART        );
          }
        case 164: break;
        case 16: 
          { return alloy_sym(yytext(), CompSym.EQUALS      );
          }
        case 165: break;
        case 93: 
          { return alloy_sym(yytext(), CompSym.EXTENDS     );
          }
        case 166: break;
        case 28: 
          { throw new ErrorSyntax(alloy_here(yytext()),"String literal is missing its closing \" character");
          }
        case 167: break;
        case 62: 
          { return alloy_sym(yytext(), CompSym.FOR         );
          }
        case 168: break;
        case 30: 
          { return alloy_num (yytext());
          }
        case 169: break;
        case 76: 
          { return alloy_sym(yytext(), CompSym.ONCE        );
          }
        case 170: break;
        case 75: 
          { return alloy_sym(yytext(), CompSym.IDEN        );
          }
        case 171: break;
        case 15: 
          { return alloy_sym(yytext(), CompSym.LT          );
          }
        case 172: break;
        case 17: 
          { return alloy_sym(yytext(), CompSym.AT          );
          }
        case 173: break;
        case 36: 
          { return alloy_sym(yytext(), CompSym.RANGE       );
          }
        case 174: break;
        case 74: 
          { return alloy_sym(yytext(), CompSym.UNIV        );
          }
        case 175: break;
        case 2: 
          { return alloy_sym(yytext(), CompSym.NOT         );
          }
        case 176: break;
        case 51: 
          { return alloy_sym(yytext(), CompSym.SET         );
          }
        case 177: break;
        case 6: 
          { return alloy_sym(yytext(), CompSym.RPAREN      );
          }
        case 178: break;
        case 88: 
          { return alloy_sym(yytext(), CompSym.BEFORE      );
          }
        case 179: break;
        case 98: 
          { return alloy_sym(yytext(), CompSym.EVENTUALLY  );
          }
        case 180: break;
        case 44: 
          { return alloy_sym(yytext(), CompSym.IN          );
          }
        case 181: break;
        case 84: 
          { return alloy_sym(yytext(), CompSym.CHECK       );
          }
        case 182: break;
        case 31: 
          { return alloy_sym(yytext(), CompSym.AND         );
          }
        case 183: break;
        case 67: 
          { return alloy_sym(yytext(), CompSym.SOME        );
          }
        case 184: break;
        case 80: 
          { return alloy_sym(yytext(), CompSym.FACT        );
          }
        case 185: break;
        case 10: 
          { return alloy_sym(yytext(), CompSym.MINUS       );
          }
        case 186: break;
        case 5: 
          { return alloy_sym(yytext(), CompSym.LPAREN      );
          }
        case 187: break;
        case 70: 
          { return alloy_sym(yytext(), CompSym.NONE        );
          }
        case 188: break;
        case 18: 
          { return alloy_sym(yytext(), CompSym.LBRACKET    );
          }
        case 189: break;
        case 19: 
          { return alloy_sym(yytext(), CompSym.RBRACKET    );
          }
        case 190: break;
        case 73: 
          { return alloy_sym(yytext(), CompSym.ENUM        );
          }
        case 191: break;
        case 49: 
          { return alloy_sym(yytext(), CompSym.ALL         );
          }
        case 192: break;
        case 95: 
          { return alloy_sym(yytext(), CompSym.ABSTRACT    );
          }
        case 193: break;
        case 86: 
          { return alloy_sym(yytext(), CompSym.ASSERT      );
          }
        case 194: break;
        case 64: 
          { throw new ErrorSyntax(alloy_here(yytext()),"String literal cannot be followed by a legal identifier character.");
          }
        case 195: break;
        case 56: 
          { return alloy_sym(yytext(), CompSym.LET         );
          }
        case 196: break;
        case 29: 
          { 
          }
        case 197: break;
        case 46: 
          { throw new ErrorSyntax(alloy_here(yytext()),"Name cannot start with a number.");
          }
        case 198: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {   return new Symbol(CompSym.EOF, alloy_here(" "), alloy_here(" "));
 }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
