one sig List {
   header: lone Node
}

sig Node {
   link: lone Node
}

pred Acyclic(l: List) {
   all n: l.header.*link | n !in n.^link 
}

fact { List.header.*link = Node } 

run Acyclic for 5

run Acyclic for 5 expect 1 -- can be "expect 0"

// count command: 
count Acyclic for 5 

// support expected count
count Acyclic for 5 expect 8

// support operators: <=, >=, =, >, <, !=
count Acyclic for 5 expect < 8 

// support expected count in   
count Acyclic for 5 expect 1*2^4

count Acyclic for 5 expect -1

